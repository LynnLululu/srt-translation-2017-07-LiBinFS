1
00:00:00,520 --> 00:00:03,200
所以我将提供一个这个代码的起始部分 然后

2
00:00:03,200 --> 00:00:06,310
我们将把关键部分作为你的一个测验

3
00:00:06,310 --> 00:00:09,270
你可以随时暂停视频

4
00:00:09,270 --> 00:00:11,230
尝试自己写出更多的代码

5
00:00:11,230 --> 00:00:13,810
有很多不同的方法来做 我们会

6
00:00:13,810 --> 00:00:17,500
向你演示其中一个 你将通过一个测验来完成它 所以

7
00:00:17,500 --> 00:00:21,740
我们要做的第一件事是定义两个常数 所以我们

8
00:00:21,740 --> 00:00:25,540
将使用 d 作阻尼因子 我将用 0.8 作为

9
00:00:25,540 --> 00:00:29,740
我的阻尼因子 这是一个概率 假设

10
00:00:29,740 --> 00:00:32,090
我们的随机网络浏览者 她选择当前

11
00:00:32,090 --> 00:00:34,540
页面上的链接 而不是重新刷新产生

12
00:00:34,540 --> 00:00:37,100
一个新的随机页面 我在这里要定义的

13
00:00:37,100 --> 00:00:40,830
另一个常数 我们将称之为 numloops 这是

14
00:00:40,830 --> 00:00:44,460
我们要经历的循环次数 我们

15
00:00:44,460 --> 00:00:47,570
计算的是在某个时间步骤的排名值

16
00:00:47,570 --> 00:00:50,860
我们经历的次数

17
00:00:50,860 --> 00:00:53,590
将决定我们排名的准确性 我们将

18
00:00:53,590 --> 00:00:56,720
使用 10 作为循环数 你可以通过

19
00:00:56,720 --> 00:00:59,210
改变这一常量来试验 习题集中的其中一题

20
00:00:59,210 --> 00:01:01,820
将要求你思考 当你改变这一常量时会

21
00:01:01,820 --> 00:01:04,010
发生什么 那么现在我们要开始了 我们说过

22
00:01:04,010 --> 00:01:07,140
初始化每个网址的排名为 1 除以页数

23
00:01:07,140 --> 00:01:11,640
因此字典 ranks 我们要初始化为

24
00:01:11,640 --> 00:01:15,250
这些值 所以 我们要创建一个空字典

25
00:01:15,250 --> 00:01:18,456
我们将其命名为 ranks 这个页数

26
00:01:18,456 --> 00:01:21,010
页数 我们可以从 graph 中得到 graph 是

27
00:01:21,010 --> 00:01:24,110
节点的字典 那么 len(graph) 将告诉我们

28
00:01:24,110 --> 00:01:26,600
该字典中的条目数 这就是节点数量

29
00:01:26,600 --> 00:01:29,490
也就是我们抓取的页面数量

30
00:01:29,490 --> 00:01:32,480
现在我们想遍历这些页面

31
00:01:32,480 --> 00:01:37,090
将每个页面初始化为 1 除以 npages 的值

32
00:01:37,090 --> 00:01:40,950
我记得在这里使用 1.0 来确保该除法

33
00:01:40,950 --> 00:01:43,290
为浮点型除法使我们得到一个

34
00:01:43,290 --> 00:01:47,170
准确的数字而不是整数除法 所以现在 我们已经

35
00:01:47,170 --> 00:01:50,070
初始化了 ranks 我们有一个字典映射

36
00:01:50,070 --> 00:01:52,700
每个页面与其当前的排名 即 1 除以

37
00:01:52,700 --> 00:01:54,650
页面数量 那么现在我们到了

38
00:01:54,650 --> 00:01:58,970
有趣的部分 我们需要一个将要经历

39
00:01:58,970 --> 00:02:02,670
numloops 次数的循环 通过每次循环

40
00:02:02,670 --> 00:02:05,960
我们要做的就是更新 newranks

41
00:02:06,980 --> 00:02:09,469
根据这个公式 使用旧的 ranks 然后

42
00:02:09,469 --> 00:02:12,390
在循环的最后 我们将使变量 ranks

43
00:02:12,390 --> 00:02:15,220
成为前一个 newranks 这样 我们

44
00:02:15,220 --> 00:02:17,220
可以继续前进 每次我们将获得一个新的

45
00:02:17,220 --> 00:02:20,080
newranks 值 在做完所有这些更新后 我们

46
00:02:20,080 --> 00:02:24,610
将更新 ranks 为 newranks 的值 所以

47
00:02:24,610 --> 00:02:26,900
这意味着 每次我们经过这个循环 我们将创建

48
00:02:26,900 --> 00:02:32,120
一个新字典 称为 newranks 初始为空 然后我们

49
00:02:32,120 --> 00:02:34,970
更新所有页面的 rank 将其添加到 newranks

50
00:02:34,970 --> 00:02:38,200
所以要做到这些 我们需要遍历

51
00:02:38,200 --> 00:02:41,120
graph 中的页面 并且对于每个页面

52
00:02:41,120 --> 00:02:44,480
我们要做的是计算该页面的新排名

53
00:02:44,480 --> 00:02:47,145
我们首先要做的就是这部分

54
00:02:47,145 --> 00:02:51,345
新的排名是 1-d 除以 npages 加这个总和

55
00:02:51,345 --> 00:02:54,670
所以 我们首先要做的就是引入一个

56
00:02:54,670 --> 00:02:57,420
新变量 我们将其称为 newrank 并将其

57
00:02:57,420 --> 00:02:59,790
赋值为这个值 然后我们将更新它

58
00:02:59,790 --> 00:03:04,460
当我们遍历链接到此页的页面 所以 我们

59
00:03:04,460 --> 00:03:08,456
将 newrank 初始化为 1-d 除以页数

60
00:03:08,456 --> 00:03:12,150
那么接下来我们需要做的就是更新这个总和

61
00:03:12,150 --> 00:03:14,830
我要留下这个空白 我现在要

62
00:03:14,830 --> 00:03:16,840
跳过这一步 这将作为一个测验

63
00:03:16,840 --> 00:03:19,940
我们将完成其余的代码 然后你的测验

64
00:03:19,940 --> 00:03:22,440
就是完成这部分代码 这也是

65
00:03:22,440 --> 00:03:26,300
计算页面排名的最有趣的部分 一旦

66
00:03:26,300 --> 00:03:28,620
我们做完这些 我们使用了 newrank 作为

67
00:03:28,620 --> 00:03:30,965
跟踪这个页面的排名的变量

68
00:03:30,965 --> 00:03:33,110
那么 我们要更新我们的字典 我们将

69
00:03:33,110 --> 00:03:37,050
添加一个条目给 newranks 我们仍在

70
00:03:37,050 --> 00:03:40,670
for 循环中 你将把你的累加所有链接

71
00:03:40,670 --> 00:03:43,960
的代码写在这里 一旦我们完成 我们就

72
00:03:43,960 --> 00:03:48,300
得到了 newrank 的值 其代表了从该页面开始

73
00:03:48,300 --> 00:03:51,360
的概率 以及从所有该页面的内部链接开始的概率

74
00:03:51,360 --> 00:03:55,070
所以我们会把这个更新为 newrank 我们已经

75
00:03:55,070 --> 00:03:58,490
将其添加到我们的字典中 所以一旦我们完成

76
00:03:58,490 --> 00:04:01,370
遍历 graph 中所有页面的循环 那么现在 我们就准备好

77
00:04:01,370 --> 00:04:03,710
下一步了 那么这就意味着我们要使

78
00:04:03,710 --> 00:04:08,440
变量 ranks 成为 newranks 那么我们已经更改

79
00:04:08,440 --> 00:04:11,690
时间步骤到下一时间步骤 现在我们将

80
00:04:11,690 --> 00:04:13,870
回去遍历这个循环 我们遍历这个循环

81
00:04:13,870 --> 00:04:15,430
numloops 次 每次我们要

82
00:04:15,430 --> 00:04:18,390
更新 ranks 当我们完成的时候

83
00:04:18,390 --> 00:04:20,130
我们要返回 ranks 这就是

84
00:04:20,130 --> 00:04:22,610
将每个页面映射到其排名的字典
