1
00:00:00,080 --> 00:00:02,120
所以现在我们已经自己创建了哈希表 我将告诉

2
00:00:02,120 --> 00:00:04,040
你一种更简单的方法 那就是

3
00:00:04,040 --> 00:00:06,980
使用内置的 Python 类型 —— 字典

4
00:00:06,980 --> 00:00:09,770
字典是哈希表的一种实现

5
00:00:09,770 --> 00:00:12,980
它内置在 Python 中 所以它会更易用

6
00:00:12,980 --> 00:00:17,350
比起定义我们自己的哈希表 到目前为止 我们已经

7
00:00:17,350 --> 00:00:21,650
看到了 Python 中的两个复杂类型 我们已经看到了字符串

8
00:00:21,650 --> 00:00:25,480
类型和我们所见过的列表类型 现在我们来介绍

9
00:00:25,480 --> 00:00:27,870
字典类型 这三者之间有很多

10
00:00:27,870 --> 00:00:30,470
共同点 也有一些其他的

11
00:00:30,470 --> 00:00:33,420
不同点 所以 要创建一个字符串 我们可以有

12
00:00:33,420 --> 00:00:37,680
引号内的一个字符序列 要创建一个列表 我们

13
00:00:37,680 --> 00:00:40,650
用方括号 然后我们可以有一系列的

14
00:00:40,650 --> 00:00:44,600
方括号中的元素 并且元素可以

15
00:00:44,600 --> 00:00:46,800
是任何类型的 不像字符串 其中必须

16
00:00:46,800 --> 00:00:50,550
是字符 因此 我们的字符串是字符序列

17
00:00:50,550 --> 00:00:56,260
我们的列表是任何类型的值的列表 即 任何值的元素列表

18
00:00:56,260 --> 00:00:59,330
我们将要创建的字典类型 使用花括号

19
00:00:59,330 --> 00:01:03,740
字典里面的条目是键值对 (key value pairs)

20
00:01:03,740 --> 00:01:06,410
所以我在这里已经创建了一个字典

21
00:01:06,410 --> 00:01:09,110
包含2个元素 每个元素中 键是一个

22
00:01:09,110 --> 00:01:12,310
字符串 这里是字符串 hydrogen 和

23
00:01:12,310 --> 00:01:15,920
相关联的值 在这个元素中是一个数字

24
00:01:15,920 --> 00:01:18,750
字典中的键 可以是任何不可变的值 所以它们不用

25
00:01:18,750 --> 00:01:21,070
必须是字符串 它们可以是数字 它们可以是

26
00:01:21,070 --> 00:01:23,960
其他东西 值可以是任何值

27
00:01:23,960 --> 00:01:29,230
字典就是一系列的键值对 而且

28
00:01:29,230 --> 00:01:31,310
字典给出的特性像哈希表一样

29
00:01:31,310 --> 00:01:34,230
我们可以查找一个键 得到一个与之相关联的值

30
00:01:34,230 --> 00:01:37,780
因此 所有类型的重要特性之一是

31
00:01:37,780 --> 00:01:41,730
它们是否可变 我们看到 字符串是不可变的

32
00:01:41,730 --> 00:01:44,720
这意味着一旦我们创建一个字符串 我们不能

33
00:01:44,720 --> 00:01:48,870
修改它 它总是具有相同的值

34
00:01:48,870 --> 00:01:52,620
列表是可变的 我们可以改变

35
00:01:52,620 --> 00:01:56,040
列表中元素的值 在我们创建列表之后

36
00:01:56,040 --> 00:01:57,770
我们可以给列表添加新元素

37
00:01:57,770 --> 00:02:01,170
字典也可变 所以 当我们

38
00:02:01,170 --> 00:02:03,610
创建一个字典之后 我们可以添加新的键值对

39
00:02:03,610 --> 00:02:07,040
给它 我们可以改变与键相关的值的值

40
00:02:07,040 --> 00:02:12,640
我们看字符串 如果 s 是一个字符串 那么我们可以做 s[i]

41
00:02:12,640 --> 00:02:15,710
这将给到我们字符串的第 i 个字母

42
00:02:15,710 --> 00:02:19,830
对于列表 我们可以做一些非常类似的操作 如果

43
00:02:19,830 --> 00:02:25,380
p 是一个列表 我们可以做 p[i] 来取得列表的第 i 个元素

44
00:02:25,380 --> 00:02:28,350
对于字典 这个有点不同 语法是

45
00:02:28,350 --> 00:02:32,160
一样的 我们可以做 d[k]

46
00:02:32,160 --> 00:02:36,120
字符串和列表 这些都是数字 在这里 k 可以是

47
00:02:36,120 --> 00:02:38,490
任何 key 的值 因此 这是一个

48
00:02:38,490 --> 00:02:41,490
字典中的键 d[k] 将给到我们

49
00:02:41,490 --> 00:02:45,520
与字典中的该键相关联的值 我们

50
00:02:45,520 --> 00:02:48,020
很快将看一些例子 我们同样可以使用我们的索引

51
00:02:48,020 --> 00:02:50,800
和赋值 我们看到 在列表中 我们可以做这些

52
00:02:50,800 --> 00:02:54,180
这将替换掉 p 的第 i 个元素的值

53
00:02:54,180 --> 00:02:57,510
用我们在这里的值 对于字符串

54
00:02:59,040 --> 00:03:01,760
我们不能这样做 这会产生一个错误

55
00:03:01,760 --> 00:03:03,410
我们不能这样做的原因是

56
00:03:03,410 --> 00:03:05,190
字符串是不可变的 所以没有办法

57
00:03:05,190 --> 00:03:08,520
修改字符串中的字符 对于字典 我们

58
00:03:08,520 --> 00:03:11,150
可以做 这个的意思是

59
00:03:11,150 --> 00:03:13,610
非常类似于我们在哈希表中的更新的含义

60
00:03:13,610 --> 00:03:16,140
所以这相当于更新该值

61
00:03:16,140 --> 00:03:19,160
与 k 相关联的值更新为 v

