1
00:00:00,270 --> 00:00:02,900
现在 我们已经创建了空的哈希表 接下来的

2
00:00:02,900 --> 00:00:05,100
步骤是弄清楚如何做查询和添加

3
00:00:05,100 --> 00:00:08,630
查询和添加都依赖于同一个第一步

4
00:00:08,630 --> 00:00:10,800
我们需要找到正确的桶 (bucket) 所以这就是

5
00:00:10,800 --> 00:00:13,890
我们接下来要做的事 想想哈希表的思想

6
00:00:13,890 --> 00:00:17,400
那么我们有一个桶的列表 每个桶是一个

7
00:00:17,400 --> 00:00:21,710
条目的列表 每个条目是一个键 (key) 和一个

8
00:00:21,710 --> 00:00:25,860
值列表 所以 不管我们是想要做查找还是

9
00:00:25,860 --> 00:00:29,200
添加 找到与该词相关联的值 或者如果我们

10
00:00:29,200 --> 00:00:33,340
要添加 并添加一个与单词相关联的新值

11
00:00:33,340 --> 00:00:35,760
我们总是需要做的第一件事就是找到正确的桶

12
00:00:35,760 --> 00:00:38,020
所以 如果你找到正确的桶 如果我们做一个查找时

13
00:00:38,020 --> 00:00:41,060
我们要做的下一件事就是需要遍历桶中所有条目

14
00:00:41,060 --> 00:00:44,260
来寻找是否有匹配的关键词

15
00:00:44,260 --> 00:00:46,950
如果我们做添加 我们还需要从找到正确的桶开始

16
00:00:46,950 --> 00:00:50,760
然后我们要遍历 看看这个词是否已经存在

17
00:00:50,760 --> 00:00:53,740
如果它不存在 我们可以添加一个新词

18
00:00:53,740 --> 00:00:56,400
我们将有一个新的条目 具有该单词和该值

19
00:00:56,400 --> 00:00:59,170
因此 无论哪个操作都依赖于首先能够找到

20
00:00:59,170 --> 00:01:01,620
正确的桶 所以我们会这样做一次 然后

21
00:01:01,620 --> 00:01:04,489
在查找和添加操作中能够重复使用该代码

22
00:01:04,489 --> 00:01:07,350
因此 我们的目标是定义一个过程 我们称之为

23
00:01:07,350 --> 00:01:11,300
hashtable_get_bucket 它需要两个输入 所以它会获取一个

24
00:01:11,300 --> 00:01:16,080
哈希表和一个关键字 然后它将一个桶 其中

25
00:01:16,080 --> 00:01:18,400
可能包含有该关键字 我们还不知道

26
00:01:18,400 --> 00:01:20,740
该关键字是否存在表中 它可能在

27
00:01:20,740 --> 00:01:23,020
该桶的某处 也可能没有 但最重要的

28
00:01:23,020 --> 00:01:26,870
事情 hashtable_get_bucket 应该做的 就是找到该桶

29
00:01:26,870 --> 00:01:28,840
有一个有用的函数是

30
00:01:28,840 --> 00:01:32,570
你之前定义的 hash_string 过程 然后 hash_string 需要

31
00:01:32,570 --> 00:01:36,150
两个输入 它需要一个字符串 也就是

32
00:01:36,150 --> 00:01:41,150
关键词 还有一个尺寸 即桶的数量

33
00:01:41,150 --> 00:01:44,890
然后输出那个桶的索引数字

34
00:01:44,890 --> 00:01:46,980
这里有一些不匹配

35
00:01:46,980 --> 00:01:49,315
你必须考虑定义

36
00:01:49,315 --> 00:01:53,610
hashtable_get_bucket 也就是 hash_string 输入是尺寸

37
00:01:53,610 --> 00:01:57,010
桶的数量 这是一个数字

38
00:01:57,010 --> 00:02:00,520
hashtable_get_bucket 的两个输入 只是 hashtable 和关键词

39
00:02:00,520 --> 00:02:02,200
所以你还需要知道如何

40
00:02:02,200 --> 00:02:06,420
获得哈希表的大小传递到 hash_string

41
00:02:06,420 --> 00:02:09,288
如果你记住哈希表的结构

42
00:02:09,288 --> 00:02:11,550
你应该能够找出如何做到这一点

43
00:02:11,550 --> 00:02:14,902
记住我们的哈希表是一个桶列表

44
00:02:14,902 --> 00:02:18,870
所以我们想要传递给 hash_string 的值是

45
00:02:18,870 --> 00:02:21,960
该哈希表的大小 桶列表中的元素数量

46
00:02:21,960 --> 00:02:24,730
即哈希表 所以看看

47
00:02:24,730 --> 00:02:29,360
你是否可以定义 hashtable_get_bucket 作为提示 你可以

48
00:02:29,360 --> 00:02:31,870
用少量代码完成整个定义

49
00:02:31,870 --> 00:02:33,760
它应该只需要一行代码就可以做到

