1
00:00:00,000 --> 00:00:04,000
对于这道题目 你需要完成好几个任务

2
00:00:04,000 --> 00:00:10,000
这些是输入 包括字符串 pattern 数字和 generations

3
00:00:10,000 --> 00:00:15,000
即将 pattern 应用到字符串的次数

4
00:00:15,000 --> 00:00:20,000
首先我们需要传入 pattern 数字

5
00:00:20,000 --> 00:00:28,000
并转换为某种能够应用到字符串的 pattern

6
00:00:28,000 --> 00:00:35,000
其次 我们需要通过将该 pattern 应用到字符串上创建新的字符串

7
00:00:35,000 --> 00:00:42,000
并重复 generations 次

8
00:00:42,000 --> 00:00:49,000
最后 我们需要返回创建的最后一个新字符串

9
00:00:49,000 --> 00:00:55,000
先看看如何通过 pattern 数字创建 pattern

10
00:00:55,000 --> 00:00:59,000
对于每个 pattern 都给出了一个数字

11
00:00:59,000 --> 00:01:04,000
注意到的一点是它们是 2 的幂次方

12
00:01:04,000 --> 00:01:09,000
我将在代码中用到这一点 你不需要 可以直接使用这些数字

13
00:01:09,000 --> 00:01:12,000
但是我决定使用 2 的幂次方

14
00:01:12,000 --> 00:01:20,000
如果给定 pattern 数字 你需要查看 128 是否满足这一 pattern

15
00:01:20,000 --> 00:01:25,000
我将除以整数 2^7

16
00:01:25,000 --> 00:01:33,000
如果是 1 则知道在新字符串中 X X X 对应的是 X

17
00:01:33,000 --> 00:01:35,000
这是我的规则

18
00:01:35,000 --> 00:01:37,000
我决定创建一个字典

19
00:01:37,000 --> 00:01:43,000
XXX 是键 X 是值

20
00:01:43,000 --> 00:01:47,000
如果是 0 那么 XXX 对应一个点

21
00:01:47,000 --> 00:01:51,000
完毕后 我需要知道余数是多少

22
00:01:51,000 --> 00:02:00,000
除以 128 后剩下的数字是多少 如果是 1 或 0

23
00:02:00,000 --> 00:02:02,000
我可以使用模数

24
00:02:02,000 --> 00:02:05,000
这将是新的 pattern 数字

25
00:02:05,000 --> 00:02:10,000
现在将对新的 pattern 数字除以 2^6

26
00:02:10,000 --> 00:02:18,000
同样 如果是 1 则键对应值 X

27
00:02:18,000 --> 00:02:23,000
如果是 0 则对应值点

28
00:02:23,000 --> 00:02:30,000
我将继续查看所有这些值 所有这些数字

29
00:02:30,000 --> 00:02:34,000
看看哪些对应 X

30
00:02:34,000 --> 00:02:36,000
哪些对应点

31
00:02:36,000 --> 00:02:39,000
我将使用这些数字

32
00:02:39,000 --> 00:02:41,000
往回检查

33
00:02:41,000 --> 00:02:44,000
现在看看代码

34
00:02:44,000 --> 00:02:49,000
我提到了我要创建 pattern 字典

35
00:02:49,000 --> 00:02:54,000
我将 pattern 初始化为空字典

36
00:02:54,000 --> 00:03:00,000
将所有 pattern 写成列表 以便引用它们

37
00:03:00,000 --> 00:03:05,000
为了简便 我将 n 设为等于字符串长度

38
00:03:05,000 --> 00:03:07,000
因为我将多次用到它

39
00:03:07,000 --> 00:03:09,000
现在有两个任务要完成

40
00:03:09,000 --> 00:03:15,000
我需要构建 pattern 字典 并且通过向字符串中应用 pattern

41
00:03:15,000 --> 00:03:19,000
创建新的字符串

42
00:03:19,000 --> 00:03:25,000
并重复 generations 次

43
00:03:25,000 --> 00:03:28,000
首先构建 pattern 字典

44
00:03:28,000 --> 00:03:34,000
正如之前提到的 我将按照递减顺序从 7 循环到 0

45
00:03:34,000 --> 00:03:43,000
和之前的操作完全一样 检查 pattern 数字是否能被该数字的 2 次幂整除

46
00:03:43,000 --> 00:03:49,000
如果等于 1 严格说来 不需要写成 ==1

47
00:03:49,000 --> 00:03:52,000
因为 1 等同于 True

48
00:03:52,000 --> 00:03:55,000
但为了可读性 我还是写上

49
00:03:55,000 --> 00:04:02,000
如果等于 1 那么将 pattern 数字减去该幂

50
00:04:02,000 --> 00:04:10,000
如果等于 0 那么对应的值是点 而不是 X

51
00:04:10,000 --> 00:04:14,000
字典创建完毕 现在开始编写循环部分

52
00:04:14,000 --> 00:04:21,000
将运行 generations 次以将字符串变成新的字符串

53
00:04:21,000 --> 00:04:29,000
for j in range(0, generations) 创建一个新字符串

54
00:04:29,000 --> 00:04:32,000
是个空字符串

55
00:04:32,000 --> 00:04:39,000
循环浏览旧字符串 即旧字符串中的索引

56
00:04:39,000 --> 00:04:45,000
现在要做的是浏览该字符串 查看每个 pattern

57
00:04:45,000 --> 00:04:48,000
我们需要构建 pattern

58
00:04:48,000 --> 00:04:50,000
什么是 pattern？

59
00:04:50,000 --> 00:04:54,000
也就是我们要查看的中心字符

60
00:04:54,000 --> 00:04:58,000
以及左右两侧的字符

61
00:04:58,000 --> 00:05:00,000
先思考下

62
00:05:00,000 --> 00:05:04,000
这会导致字符串出现任何问题吗？

63
00:05:04,000 --> 00:05:08,000
如果 i 为 0 则写到字符串的开头

64
00:05:08,000 --> 00:05:12,000
i - 1 会怎样？得出 -1

65
00:05:12,000 --> 00:05:17,000
因为 Python 允许我们从后往前对字符串编制索引 所以没关系

66
00:05:17,000 --> 00:05:22,000
这将是字符串的最后一个元素 跟着第一个字符

67
00:05:22,000 --> 00:05:25,000
然后是第二个字符 正是我们需要的

68
00:05:25,000 --> 00:05:28,000
我们看看字符串的另一端

69
00:05:28,000 --> 00:05:32,000
如果 i 是字符串的最后一个元素 那么就有问题了

70
00:05:32,000 --> 00:05:36,000
该元素在字符串末尾之后

71
00:05:36,000 --> 00:05:39,000
所以我们就会遇到错误 我们希望它成为什么？

72
00:05:39,000 --> 00:05:42,000
我们希望它成为字符串的第一个元素

73
00:05:42,000 --> 00:05:45,000
为此 我将使用模数 n

74
00:05:45,000 --> 00:05:51,000
因为 i + 1 当我们位于字符串末尾时 i 是 n - 1

75
00:05:51,000 --> 00:05:58,000
+1 得出 n n%n 是 0 即字符串的第一个元素 正是我们想要的

76
00:05:58,000 --> 00:06:00,000
pattern 就写好了

77
00:06:00,000 --> 00:06:03,000
我们需要在字典中查询我们的 pattern

78
00:06:03,000 --> 00:06:08,000
我们需要将中心字符变成的字符

79
00:06:08,000 --> 00:06:11,000
i 变成的字符添加到 new_string

80
00:06:11,000 --> 00:06:16,000
在 patterns 中查找得出该字符

81
00:06:16,000 --> 00:06:19,000
浏览完整个长度的字符串后

82
00:06:19,000 --> 00:06:25,000
让我的字符串等于 new_string 继续循环

83
00:06:25,000 --> 00:06:30,000
循环 generations 次后 返回 new_string

84
00:06:30,000 --> 00:06:34,000
这一过程就完成了 当然还有一些错别字

85
00:06:34,000 --> 00:06:41,000
应该写成 for i in range 这里的变量名称也需要修改下

86
00:06:41,000 --> 00:06:44,000
应该是 pattern 而不是 patterns
