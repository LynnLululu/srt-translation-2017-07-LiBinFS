1
00:00:00,740 --> 00:00:02,910
那么现在我们知道输入和输出

2
00:00:02,910 --> 00:00:05,990
函数几乎能够自然而然地写出来的 尤其是我们在定义函数前

3
00:00:05,990 --> 00:00:10,180
已经知道我们想要执行什么样的代码

4
00:00:10,180 --> 00:00:13,370
所以我要通过修改这里的代码 来编写这个函数 

5
00:00:15,380 --> 00:00:18,600
我们要做的第一件事是留出一些空

6
00:00:18,600 --> 00:00:21,230
除了这 4 行我们打算转换为函数的代码

7
00:00:21,230 --> 00:00:24,350
删掉其他代码 现在我还没有

8
00:00:24,350 --> 00:00:27,760
修改这个代码 我现在拥有的 几乎正是

9
00:00:27,760 --> 00:00:30,330
函数主体需要的代码 这是

10
00:00:30,330 --> 00:00:33,330
我们想要做的 我们需要做的是修改它

11
00:00:33,330 --> 00:00:36,780
使其接收输入 并将之转变为一个函数 那么 

12
00:00:36,780 --> 00:00:40,760
要使它变成一个函数 我们需要用 def 语法

13
00:00:40,760 --> 00:00:45,000
我们要定义函数 get_next_target

14
00:00:45,000 --> 00:00:48,250
现在我们需要参数 即函数的输入

15
00:00:48,250 --> 00:00:51,600
然后我们确定 输入应该是网页内容

16
00:00:51,600 --> 00:00:54,420
即构成页面内容的字符串

17
00:00:54,420 --> 00:00:57,000
也就是我们的变量 page 的值

18
00:00:57,000 --> 00:01:01,010
所以我们在这里再次调用 page

19
00:01:01,010 --> 00:01:03,620
作为我们的输入 现在我们有

20
00:01:03,620 --> 00:01:06,020
函数的主体 代码和我们之前的

21
00:01:06,020 --> 00:01:09,180
代码一模一样 但是这次 page 并不是之前的

22
00:01:09,180 --> 00:01:12,860
那些网页内容 而将是我们作为输入值传递给

23
00:01:12,860 --> 00:01:15,570
函数的内容 那么我们可以改变 page 的名字

24
00:01:15,570 --> 00:01:18,500
修改变量名是有道理的

25
00:01:18,500 --> 00:01:21,110
这段代码不论我们传递任何值都会运行 它不一定是

26
00:01:21,110 --> 00:01:24,500
一个网页 对于任何我们传递的字符串 这个代码都会

27
00:01:24,500 --> 00:01:27,230
寻找它 所以给它一个稍微通用的名字

28
00:01:27,230 --> 00:01:31,280
会更好 我们将名字改为 s 如果我们修改

29
00:01:31,280 --> 00:01:35,160
参数的名字 那么所有用上 page 的地方都需要修改

30
00:01:35,160 --> 00:01:37,530
现在我们没有 page 值 我们有的

31
00:01:37,530 --> 00:01:40,060
是 s 的值 对应当前参数的名字

32
00:01:40,060 --> 00:01:44,180
所以我们将这些都改为 s

33
00:01:44,180 --> 00:01:46,550
我们差不多要完成了 这还有一个大问题等着我们

34
00:01:46,550 --> 00:01:49,630
去做 那就是我们如何得到输出 好了

35
00:01:49,630 --> 00:01:51,640
我们说过我们想要的输出是

36
00:01:51,640 --> 00:01:56,500
url 和 end_quote 的值 我们需要某种方式

37
00:01:56,500 --> 00:01:58,660
来获取这些值 而这种方式是

38
00:01:58,660 --> 00:02:01,772
使用 return 语句 return 在 Python 中是一个

39
00:02:01,772 --> 00:02:05,490
特殊的结构 那么我们有关键字 return 跟着

40
00:02:05,490 --> 00:02:07,340
一个包含所有我们想从函数中

41
00:02:07,340 --> 00:02:10,250
返回的东西的列表 那么我们要返回的是

42
00:02:10,250 --> 00:02:14,000
一个包含了任意数量的表达式的列表 用逗号分开

43
00:02:14,000 --> 00:02:18,030
我们可能有零个返回的表达式

44
00:02:18,030 --> 00:02:21,510
这意味着没有输出 函数没有输出有时是

45
00:02:21,510 --> 00:02:24,630
有一定用途的 我们只想将函数想成一个

46
00:02:24,630 --> 00:02:26,950
输入输出的映射关系是不对的

47
00:02:26,950 --> 00:02:30,270
函数还可以做其他的事情 它们可以

48
00:02:30,270 --> 00:02:32,970
做一些我们称之为“副作用”的事情 副作用是什么东西呢 是我们能够

49
00:02:32,970 --> 00:02:36,760
看见的 但是并不是输出的东西 一个副作用的

50
00:02:36,760 --> 00:02:41,170
例子是 如果我们打印出一些东西 我们会

51
00:02:41,170 --> 00:02:43,870
看见结果 我们看见的是代码和函数运行时

52
00:02:43,870 --> 00:02:47,840
发生的一切 但是我们不能使其作为输出

53
00:02:47,840 --> 00:02:49,920
所以 在这个例子中 我们确实想要从 get_next_target

54
00:02:49,920 --> 00:02:54,250
函数中获得输出 我们想要返回结果 以便于我们知道如何

55
00:02:54,250 --> 00:02:57,290
继续 那么我们确定了输出应该是

56
00:02:57,290 --> 00:03:00,880
url 的值 即我们想要找的下一个目标字符串

57
00:03:00,880 --> 00:03:04,640
以及 end_quote 的值 这样我们

58
00:03:04,640 --> 00:03:07,800
知道它被找到的位置 所以让我们看看你

59
00:03:07,800 --> 00:03:10,390
是否能想出如何完成这个 return 语句

60
00:03:10,390 --> 00:03:12,850
你的目标是想出我们在 return 后面

61
00:03:12,850 --> 00:03:16,090
需要的代码 来完成这个函数
