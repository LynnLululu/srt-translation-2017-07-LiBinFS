1
00:00:00,008 --> 00:00:04,570
这里是答案 我们可以定义 hashtable_get_bucket

2
00:00:04,570 --> 00:00:07,280
它需要两个输入 哈希表 我们将

3
00:00:07,280 --> 00:00:10,110
称之为 htable 还有 key 也就是

4
00:00:10,110 --> 00:00:12,960
我们正在寻找的词 要找到

5
00:00:12,960 --> 00:00:16,290
桶 (bucket) 那么我们要使用 hash_string 我们要

6
00:00:16,290 --> 00:00:19,600
传入同一个词 关键词 也就是

7
00:00:19,600 --> 00:00:22,180
这个输入 key 桶的数目是

8
00:00:22,180 --> 00:00:25,650
该表的长度 所以我们要调用 hash_string

9
00:00:25,650 --> 00:00:29,500
传入这个 key 然后作为第 2 个输入 我们需要

10
00:00:29,500 --> 00:00:33,690
该表的长度 即桶的数量 所以

11
00:00:33,690 --> 00:00:36,710
这将让我们获得一个数字——我们想要的

12
00:00:36,710 --> 00:00:38,880
桶的索引 要获得该桶 我们需要

13
00:00:38,880 --> 00:00:42,590
使用它作为索引从 htable 中选择该元素

14
00:00:42,590 --> 00:00:44,840
然后我们要返回结果 所以这就是所有

15
00:00:44,840 --> 00:00:47,930
我们找到桶所需要做的 让我们在

16
00:00:47,930 --> 00:00:50,900
Python 解释器中看看 那么这里是我们目前的代码

17
00:00:50,900 --> 00:00:53,590
我们有我们定义过的 hash_string 过程

18
00:00:53,590 --> 00:00:57,410
将关键词和桶的数量映射到

19
00:00:57,410 --> 00:01:00,130
哈希表中应该出现的位置 我们有

20
00:01:00,130 --> 00:01:03,650
make_hashtable 过程 创建一个拥有这个桶数的空表

21
00:01:03,650 --> 00:01:07,100
然后现在我们有 hashtable_get_bucket 过程

22
00:01:07,100 --> 00:01:09,300
接收一个哈希表和一个键 给出

23
00:01:09,300 --> 00:01:12,120
哈希表中该键所属的条目 ——

24
00:01:12,120 --> 00:01:15,310
—— 使用 hash_string 函数找到的正确位置

