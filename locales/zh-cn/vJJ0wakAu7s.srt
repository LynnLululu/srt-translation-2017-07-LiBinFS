1
00:00:00,120 --> 00:00:02,500
那么让我们思考一下我们想要查找 (lookup) 做什么 它将

2
00:00:02,500 --> 00:00:05,260
获取一个哈希表和一个词 它的输出将是

3
00:00:05,260 --> 00:00:09,750
与该关键字相关联的值 我们想要的查找做的是

4
00:00:09,750 --> 00:00:12,900
像添加 (add) 一样 它首先要做的就是找到

5
00:00:12,900 --> 00:00:14,440
正确的桶 我们已经定义了这个

6
00:00:14,440 --> 00:00:16,520
过程 hashtable_get_bucket 使它很容易

7
00:00:16,520 --> 00:00:18,780
做到这一点 一旦我们找到了桶 我们想要

8
00:00:18,780 --> 00:00:21,750
查找做的是遍历桶中的所有条目 看看

9
00:00:21,750 --> 00:00:25,430
是否有一个条目的键 (关键词) 与我们传入的词

10
00:00:25,430 --> 00:00:28,549
相匹配 所以 你的目标是定义一个过程

11
00:00:28,549 --> 00:00:32,210
我们称之为 hashtable_lookup 它有两个输入：一个哈希表

12
00:00:34,380 --> 00:00:36,950
和一个字符串类型的键 (key) 然后输出

13
00:00:36,950 --> 00:00:40,440
与该键关联的值 每当你被要求定义一个

14
00:00:40,440 --> 00:00:45,260
过程 你应该仔细思考这个描述是否足够清楚

15
00:00:45,260 --> 00:00:48,470
在这种情况下不是 还有一种情况 这个描述

16
00:00:48,470 --> 00:00:51,320
没有包括在内 我们需要考虑 key 实际上

17
00:00:51,320 --> 00:00:53,950
不在表中的情况 那么我们该怎么办呢？

18
00:00:53,950 --> 00:00:56,400
我们有很多不同的事情可以做 我们

19
00:00:56,400 --> 00:00:59,430
可以生成一个错误 生成一个错误的问题是

20
00:00:59,430 --> 00:01:02,210
当我们调用它时 必须处理它 我们希望生成的

21
00:01:02,210 --> 00:01:05,120
值可以用来表示

22
00:01:05,120 --> 00:01:08,150
没有与该键相关联的条目的情况

23
00:01:08,150 --> 00:01:12,360
我们将使用 None 值 所以如果键不在表中

24
00:01:12,360 --> 00:01:15,740
查询的结果应该是 None

25
00:01:15,740 --> 00:01:18,020
这意味着没有与该键关联的值

