1
00:00:00,000 --> 00:00:04,000
所以答案是 它什么作用也没有

2
00:00:04,000 --> 00:00:07,000
当我们调用求和程序时 它会让电脑做一些工作

3
00:00:07,000 --> 00:00:11,000
但是调用这个程序没有什么好处

4
00:00:11,000 --> 00:00:14,000
它没有返回 所以不会生成任何输出

5
00:00:14,000 --> 00:00:20,000
事实上 它不会以任何调用方可见的方式改动第一个输入的值

6
00:00:20,000 --> 00:00:23,000
它确实会在求和过程内部改动 a 的值

7
00:00:23,000 --> 00:00:25,000
但是调用方无法看到这一切

8
00:00:25,000 --> 00:00:30,000
让我们看一看它在 Python 解释器中的运行 以确保我们理解现在的情况

9
00:00:30,000 --> 00:00:36,000
我们将会定义求和过程 使用两个输入

10
00:00:36,000 --> 00:00:38,000
并用 a 加 b 的值给求和过程的主体赋值

11
00:00:38,000 --> 00:00:41,000
我们可以尝试输出调用求和过程的结果

12
00:00:41,000 --> 00:00:44,000
让我们看看它是否能得出1加1的结果

13
00:00:44,000 --> 00:00:48,000
当我们运行这个过程时 会看到事实上它无法得出任何结果

14
00:00:48,000 --> 00:00:52,000
因为事实上求和过程并没有返回任何输出

15
00:00:52,000 --> 00:00:54,000
所以不会得出任何的值

16
00:00:54,000 --> 00:00:58,000
Python 使用 "none"（零）这个特殊的值来表示没有任何的值

17
00:00:58,000 --> 00:00:59,000
所这个过程没有什么用

18
00:00:59,000 --> 00:01:02,000
我们可以传入更大的数字

19
00:01:02,000 --> 00:01:08,000
不论我们传入什么样的输入 我们仍然会得到 “none” 这个结果 因为求和过程不会返回任何输出

20
00:01:08,000 --> 00:01:09,738
为了确保我们对于现在的状况很清楚

21
00:01:09,738 --> 00:01:11,646
我们将在求和过程中加上一些打印语句

22
00:01:11,646 --> 00:01:16,769
打印实际上是个测试代码的绝佳方式

23
00:01:16,769 --> 00:01:18,538
以确保你了解目前的状况

24
00:01:18,538 --> 00:01:21,000
所以 加上打印语句永远是个好主意

25
00:01:21,000 --> 00:01:22,000
有时我们称之为调试

26
00:01:22,000 --> 00:01:26,000
如果代码有问题

27
00:01:26,000 --> 00:01:27,000
加上打印语句来查看目前状况是个找出问题的好方法

28
00:01:27,000 --> 00:01:30,000
在这里 我会把输入的求和打印出来

29
00:01:30,000 --> 00:01:34,000
我会打印出 a 的值 然后再做一次

30
00:01:34,000 --> 00:01:38,000
现在当程序运行时 我们会看到 “enter sum” (输入求和)

31
00:01:38,000 --> 00:01:40,000
当我们输入求和时 a 的值是 2

32
00:01:40,000 --> 00:01:43,000
这是输入的第一个参数的值

33
00:01:43,000 --> 00:01:48,000
b 的值是 123 这是输入的第二个参数的值

34
00:01:48,000 --> 00:01:51,000
当我们输出第一个输入 a的 值是 2

35
00:01:51,000 --> 00:01:54,000
我们看到 a 是 2 做一下算数 a的值会改变

36
00:01:54,000 --> 00:01:59,000
所以现在再运行同样的 print 语句 打印出来的 a 的值是 125

37
00:01:59,000 --> 00:02:02,000
接着我们返回 就有了结果 结果是 “none“

38
00:02:02,000 --> 00:02:06,000
求和过程没有得出任何输出 这就是打印出来的结果

39
00:02:06,000 --> 00:02:12,000
所以如果我们为该过程加上一个返回语句 现在我们已有原先的代码

40
00:02:12,000 --> 00:02:14,000
我删除了 print 语句

41
00:02:14,000 --> 00:02:16,000
我们不需要再看到这些

42
00:02:16,000 --> 00:02:19,000
我们有了代码 现在又加上了返回语句

43
00:02:19,000 --> 00:02:24,846
现在当我们运行这个过程时 确实得到了125这个值

44
00:02:24,846 --> 00:02:31,000
因为求和过程的输出就是返回的结果 即 a 的值 也就是2加123的结果

45
00:02:31,000 --> 00:02:36,323
我想要明确的另一件事是 在没有返回语句的情况下

46
00:02:36,323 --> 00:02:38,708
如果我们传入了变量 它们的值仍然不会改变

47
00:02:38,708 --> 00:02:43,000
假设我们有个变量 用a表示

48
00:02:43,000 --> 00:02:47,000
我将会使用变量 a 用 2 给 a 赋初值

49
00:02:47,000 --> 00:02:50,000
我们还有变量 b 用 123 给 b 赋值

50
00:02:50,000 --> 00:02:55,000
我们将调用求和程序 因为没有返回语句 所以该过程不会返回任何的值

51
00:02:55,000 --> 00:02:59,415
让我们看一看 a 的值是否最终改变了

52
00:02:59,415 --> 00:03:02,353
但它没有变 因为这里传入的输入

53
00:03:02,354 --> 00:03:04,446
即使有一个复杂的表达式

54
00:03:04,446 --> 00:03:08,277
即使用一个名称 或有一些可以得出结果的计算

55
00:03:08,277 --> 00:03:11,799
我们所传入的输入就是得出的值

56
00:03:11,800 --> 00:03:14,000
所以名称无关紧要

57
00:03:14,000 --> 00:03:19,000
当我们调用求和程序时 作为输入传入的 a 的值就是它所指代的值

58
00:03:19,000 --> 00:03:20,000
也就是数字2

59
00:03:20,000 --> 00:03:24,000
事实上我们并不会改动变量

60
00:03:24,000 --> 00:03:25,877
这完全是另一个变量

61
00:03:25,877 --> 00:03:29,000
让我画一个图来更清晰的显示目前的状况

62
00:03:29,000 --> 00:03:30,000
我们有了代码

63
00:03:30,000 --> 00:03:34,000
有了名为a的变量

64
00:03:34,000 --> 00:03:36,000
它的值是2

65
00:03:36,000 --> 00:03:41,000
变量b的值为123

66
00:03:41,000 --> 00:03:42,000
2个都是数字

67
00:03:42,000 --> 00:03:45,000
我们现在有定义如下的过程

68
00:03:45,000 --> 00:03:46,600
该过程需要2个输入 它改变输入a的值

69
00:03:50,238 --> 00:03:54,754
我们将调用求和过程 传入a和b

70
00:03:54,754 --> 00:03:59,000
在调用求和程序时 我们有了这两个名称

71
00:03:59,000 --> 00:04:00,000
这些名称是参数

72
00:04:00,000 --> 00:04:05,000
我们在求和过程内部有一个名为a的输入

73
00:04:05,000 --> 00:04:08,000
这将指代传入的任何的值

74
00:04:08,000 --> 00:04:13,000
所以为了知道值是多少 我们求名为a的值 得到2这个值

75
00:04:13,000 --> 00:04:16,000
a将指代2这个值

76
00:04:16,000 --> 00:04:19,000
b将指代我们所传入的名为b的值

77
00:04:19,000 --> 00:04:21,000
也就是123这个数字

78
00:04:21,000 --> 00:04:23,000
接着我们运行求和程序 给变量赋值

79
00:04:23,000 --> 00:04:27,000
将会得出一个新的数字 也就是2加123

80
00:04:27,000 --> 00:04:32,000
得到125这个值 然后再赋值

81
00:04:32,000 --> 00:04:35,000
这次赋值会改变a所指代的值

82
00:04:35,000 --> 00:04:38,000
现在a不再指代数字2

83
00:04:38,000 --> 00:04:45,000
在该求和过程中 a这个参数现在指代的是数字125

84
00:04:45,000 --> 00:04:51,877
注意 a原来的值仍然是2

85
00:04:51,877 --> 00:04:57,554
再回到该过程中 一旦我们到了这一步 就会返回

86
00:04:57,554 --> 00:05:00,000
我们又回到运行代码这一步

87
00:05:00,000 --> 00:05:05,215
在求和过程主体中所有原本可见的参数

88
00:05:05,215 --> 00:05:06,691
都变得不可见了

89
00:05:06,692 --> 00:05:09,000
它们只是因为执行过程才留在那里 但现在已经没用了

90
00:05:09,000 --> 00:05:11,000
我们无法再使用这些名称了

91
00:05:11,000 --> 00:05:14,800
它们仅在执行该求和过程时才可见

92
00:05:14,800 --> 00:05:18,800
到了这一步时 a指代数字2 就像以前一样

