1
00:00:00,530 --> 00:00:02,910
我们要在 Python 解释器上尝试一些事情

2
00:00:02,910 --> 00:00:05,790
来获得事物花费时间的认知 我已经

3
00:00:05,790 --> 00:00:09,730
在这里写下了一个过程 对一段代码的运行

4
00:00:09,730 --> 00:00:12,840
进行计时 没错 我们可以只是用秒表来计时

5
00:00:12,840 --> 00:00:15,800
然后我们不得不运行很长的东西才

6
00:00:15,800 --> 00:00:18,420
可能得到一个合理的准确的时间 但是

7
00:00:18,420 --> 00:00:20,810
Python 有一个内置的过程 我们可以用它来测量

8
00:00:20,810 --> 00:00:25,620
时间 这就是 time.clock() 过程 所以 我们确实可以尝试

9
00:00:25,620 --> 00:00:27,740
使用秒表 只要我们运行的程序

10
00:00:27,740 --> 00:00:30,030
花费足够长的运行时间 这可以使我们

11
00:00:30,030 --> 00:00:32,540
对它们花费的时间有个合理的认知 然而

12
00:00:32,540 --> 00:00:34,760
使用这个内置过程会更精准

13
00:00:34,760 --> 00:00:41,250
这是由时间库提供的 可以评估

14
00:00:41,250 --> 00:00:44,700
秒数 所以 time.clock 的值

15
00:00:44,700 --> 00:00:47,390
会给我们以秒为单位的当前处理器的时间

16
00:00:47,390 --> 00:00:50,740
在那里 开始点是相当随意的 但重要的是

17
00:00:50,740 --> 00:00:53,390
如果我们调用它两次 我们在这个

18
00:00:53,390 --> 00:00:57,120
时间开始 在第二次调用的时间停止

19
00:00:57,120 --> 00:01:00,460
我们将它们存储在变量 start 和 stop 中

20
00:01:00,460 --> 00:01:03,650
那将会给到我们 它运行代码所需要

21
00:01:03,650 --> 00:01:06,670
花费的时间量 所以我给出一个过程

22
00:01:06,670 --> 00:01:09,630
初始化变量 start 为当前的时间

23
00:01:09,630 --> 00:01:13,420
然后运行一些代码 我之后将详细讲解

24
00:01:13,420 --> 00:01:15,925
关于第二行做了什么 然后计算

25
00:01:15,925 --> 00:01:18,900
当前时间和开始时间的时间差

26
00:01:18,900 --> 00:01:21,430
把这个值赋予我们的运行时间 (run_time) 并返回

27
00:01:21,430 --> 00:01:23,880
代码的结果和代码的运行时间

28
00:01:23,880 --> 00:01:27,080
这里发生了什么其实是相当令人兴奋的

29
00:01:27,080 --> 00:01:31,520
我们使用了 eval 函数 eval 使我们能够将

30
00:01:31,520 --> 00:01:35,130
任何字符串评估 (evaluate) 为一个 Python 表达式 所以

31
00:01:35,130 --> 00:01:38,350
我们在这里传入一个字符串 但是当我们将

32
00:01:38,350 --> 00:01:40,460
这个字符串传入到 eval 中时 它会将之当作代码运行

33
00:01:41,460 --> 00:01:45,160
因此 我们可以传入任何 Python 表达式 我们将启动

34
00:01:45,160 --> 00:01:47,920
并结束定时器 然后在这期间 我们要将代码

35
00:01:47,920 --> 00:01:50,791
评估 并获得评估后该代码运行的结果 所以我

36
00:01:50,791 --> 00:01:54,450
定义了这个过程 time_execution 它将给到我们

37
00:01:54,450 --> 00:01:57,650
任何它所评估的 Python 表达式运行所需要的时间 现在我们要

38
00:01:57,650 --> 00:02:00,080
运行一些测试 不是通过网页浏览器的解释器运行它们

39
00:02:00,080 --> 00:02:02,940
你们之前一直使用的就是 我将直接

40
00:02:02,940 --> 00:02:06,980
在我电脑上的 Python shell 中运行它们 

41
00:02:06,980 --> 00:02:10,110
原因是 我们会得到更精确的时间测量

42
00:02:10,110 --> 00:02:13,955
你们可以尝试使用我们提供的网页浏览器界面运行

43
00:02:13,955 --> 00:02:16,630
问题是那样会对我们让你运行的程序时长有所限制

44
00:02:16,630 --> 00:02:20,640
而且时间不会很准确 所以作为代替 我将

45
00:02:20,640 --> 00:02:23,700
要在 Python shell 中运行这些 如果你已经安装了 Python

46
00:02:23,700 --> 00:02:26,410
你可以自己试试这个 我们在网站上有一些说明

47
00:02:26,410 --> 00:02:29,500
关于如何能做到这一点 但这样做对于

48
00:02:29,500 --> 00:02:32,270
接下来的课程是非必须的 我只是想演示

49
00:02:32,270 --> 00:02:34,630
time_execution 是如何工作的 所以 让我们尝试

50
00:02:34,630 --> 00:02:36,800
一个简单的例子 我们将要对执行

51
00:02:38,920 --> 00:02:42,050
表达式1 + 1进行计时 这是一个

52
00:02:42,050 --> 00:02:45,720
简单的加法 我们将两个数字相加 那么来看看

53
00:02:45,720 --> 00:02:49,270
这需要多久 当我们运行 time_execution 时 我们得到

54
00:02:49,270 --> 00:02:51,960
两个返回的结果 我们得到的 result 是

55
00:02:51,960 --> 00:02:53,830
1 + 1 = 2 那很好 然后作为

56
00:02:53,830 --> 00:02:57,760
第二个结果 我们得到了它花费的时间

57
00:02:57,760 --> 00:03:01,060
有点儿难读 它看起来像8.3 然后

58
00:03:01,060 --> 00:03:04,860
e-05 所以 这意味着它使用了

59
00:03:04,860 --> 00:03:09,450
科学记数法 -05表示小数点所在的位置

60
00:03:09,450 --> 00:03:15,170
所以它真正看起来像这样 四个零后面

61
00:03:15,170 --> 00:03:21,200
跟着是83点点点 这就是一个以秒为单位的值

62
00:03:21,200 --> 00:03:26,082
以秒为单位 运行时间是0.00008秒

63
00:03:26,082 --> 00:03:29,960
如果我们再次做同样的事情 我们

64
00:03:29,960 --> 00:03:32,880
尝试对完全相同的事情计时 我们没有得到完全

65
00:03:32,880 --> 00:03:36,550
相同的结果 好像计时是不准确的 这取决于其他

66
00:03:36,550 --> 00:03:38,510
在这台机器上运行的事情 我们不会得到完全相同的

67
00:03:38,510 --> 00:03:40,540
答案 但它仍然是一个非常小的数字 如果我们

68
00:03:40,540 --> 00:03:44,230
尝试几次 我们会继续看到这么小的数字

69
00:03:44,230 --> 00:03:48,970
如果我们尝试 更复杂的加法 它还是会给

70
00:03:48,970 --> 00:03:51,440
我们一个非常小的数字 很小数量

71
00:03:51,440 --> 00:03:55,250
的微秒 处理这样简单的事情 处理器时间实际上

72
00:03:55,250 --> 00:03:58,750
可能低于这些 但这里也有一些其他的事情发生 因为

73
00:03:58,750 --> 00:04:01,490
我们需要停止和启动时钟 (clock) 和其他的事情

74
00:04:01,490 --> 00:04:05,170
以便于计时 如果我们尝试运行更长的东西 我们会看到更多

75
00:04:05,170 --> 00:04:10,110
这不会告诉我们 很多评估是非常简单非常快速的评估

