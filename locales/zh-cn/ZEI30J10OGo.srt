1
00:00:00,314 --> 00:00:03,130
这和我们之前的较长的过程是等同的

2
00:00:03,130 --> 00:00:07,647
我们要检查在位置零的结果是否等于 D 

3
00:00:07,647 --> 00:00:11,330
或者是否等于 N 

4
00:00:11,330 --> 00:00:13,814
这样产生的结果是相同的

5
00:00:13,814 --> 00:00:16,280
我们已经介绍了新运算符 or 

6
00:00:16,280 --> 00:00:21,313
其左右两边的运算对象的逻辑关系是 or 

7
00:00:21,313 --> 00:00:24,930
下面我们看看 or 运算具体是怎样的

8
00:00:24,930 --> 00:00:26,363
我们可以这样使用 or 

9
00:00:26,363 --> 00:00:32,640
True or False 的值为 True 

10
00:00:32,640 --> 00:00:39,463
False or True 的值还是为 True 

11
00:00:39,463 --> 00:00:46,947
True or True 的值也是 True 但 False or False 的值则为 False 

12
00:00:46,947 --> 00:00:50,214
我这里用的是布尔型常量

13
00:00:50,214 --> 00:00:54,981
实际上可以用任何表达式 比如我们在位置零所用的名字

14
00:00:54,981 --> 00:01:00,613
重要的是 or 和其它运算符不同

15
00:01:00,613 --> 00:01:03,814
它只计算它需要计算的

16
00:01:03,814 --> 00:01:06,346
下面是一个重要的例子

17
00:01:06,346 --> 00:01:10,264
True or this_is_an_error (这是一个错误) 

18
00:01:10,264 --> 00:01:12,731
结果将为 True 

19
00:01:12,731 --> 00:01:16,714
尽管如果我们只看 this_is_an_error 本身

20
00:01:16,714 --> 00:01:18,712
这是一个没有定义的变量

21
00:01:18,712 --> 00:01:21,800
我们没有定义 this_is_an_error 这个变量

22
00:01:21,800 --> 00:01:22,996
但当我们运算这个 or 表达式

23
00:01:22,996 --> 00:01:27,562
因为我们已经知道第一部分为 True 我们就不会得到错误

24
00:01:27,563 --> 00:01:31,581
如果我们运算的不是 True or this_is_an_error 

25
00:01:31,581 --> 00:01:34,747
而是 False or this_is_an_error 

26
00:01:34,747 --> 00:01:38,546
那就有必要看第二部分了 于是我们会得到一个错误

27
00:01:38,546 --> 00:01:42,800
下面我们来试一下 False or this_is_an_error 

28
00:01:42,800 --> 00:01:45,363
我们得到的是一个错误 因为第一个运算对象是 False 

29
00:01:45,363 --> 00:01:48,680
要知道这个 or 是 True 还是 False 我们需要看第二部分

30
00:01:48,680 --> 00:01:50,546
第二部分是没有定义的

31
00:01:50,546 --> 00:01:53,679
or 的这种行为会非常有用

32
00:01:53,679 --> 00:01:59,315
我们还会碰到其它不处理第二个运算对象的情况

33
00:01:59,315 --> 00:02:01,179
如果第一个运算对象为 True 

34
00:02:01,180 --> 00:02:06,330
下面我们总结一下 or 运算是怎样进行的

35
00:02:06,330 --> 00:02:09,464
如果第一个表达式的值为 True 

36
00:02:09,464 --> 00:02:13,630
那么该 or 结构的值为 True 

37
00:02:13,630 --> 00:02:15,745
没有必要再看第二个表达式了

38
00:02:15,746 --> 00:02:18,663
事实上 Python 解释器也不会处理第二部分

39
00:02:18,663 --> 00:02:21,814
如果第一个表达式的值为 False 

40
00:02:21,814 --> 00:02:24,814
那么该 or 结构的值就是第二个表达式的值

