1
00:00:00,270 --> 00:00:03,570
最后要做的更改是思考我们的随机冲浪模型

2
00:00:03,570 --> 00:00:07,600
如果这就是我们的模型

3
00:00:07,600 --> 00:00:11,880
如果某个网页没有向内链接 那么热门排名就是 0

4
00:00:11,880 --> 00:00:14,540
我们不希望出现这种情况

5
00:00:14,540 --> 00:00:17,220
随机网络冲浪器随机地从某个网页开始

6
00:00:17,220 --> 00:00:20,240
可能会随机地从没有链接的网页开始

7
00:00:20,240 --> 00:00:23,060
如果将没有链接的所有网页得分设为 0

8
00:00:23,060 --> 00:00:25,610
那么新网页就很难启动

9
00:00:25,610 --> 00:00:27,710
所以不希望这些为 0

10
00:00:27,710 --> 00:00:30,400
所以即使某个网页没有链接

11
00:00:30,400 --> 00:00:34,490
也会有一定的随机概率抵达该网页

12
00:00:34,490 --> 00:00:37,180
意味着我们将向此和上加一个数字 这样当网页没有向内链接时

13
00:00:37,180 --> 00:00:39,800
值不为 0 另一方面

14
00:00:39,800 --> 00:00:42,840
我们将稍微调整下这个求和公式

15
00:00:42,840 --> 00:00:46,560
将使用阻尼函数进行调整

16
00:00:46,560 --> 00:00:51,080
再来看看随机网络冲浪器

17
00:00:51,080 --> 00:00:54,300
即使沿着一条具有更多链接的路径

18
00:00:54,300 --> 00:00:57,000
在某个位置 冲浪器可能也会觉得累了

19
00:00:57,000 --> 00:00:59,570
会放弃并从新的随机网页重新开始

20
00:00:59,570 --> 00:01:02,710
阻尼函数会计算随机网络冲浪器

21
00:01:02,710 --> 00:01:06,840
选择随机链接与在新的随机网页上

22
00:01:06,840 --> 00:01:10,070
重新开始的比例 这就叫做阻尼值

23
00:01:10,070 --> 00:01:13,110
我们将使用阻尼值来调整这一数字

24
00:01:13,110 --> 00:01:16,660
称为 d 即阻尼常量

25
00:01:16,660 --> 00:01:19,610
通常该值都小于 1

26
00:01:19,610 --> 00:01:22,980
建议设为 0.8

27
00:01:22,980 --> 00:01:25,430
现在我们将更改我们的排名函数 并考虑这一参数

28
00:01:25,430 --> 00:01:28,510
我们将有一些初始值

29
00:01:28,510 --> 00:01:32,590
如果要使值保持在合理范围内 而不是从 1 开始

30
00:01:32,590 --> 00:01:35,790
我们将使这些值除以网页总数

31
00:01:35,790 --> 00:01:38,210
这么做的原因是让排名保持在合理范围内

32
00:01:38,210 --> 00:01:41,750
这样将使开始计算排名之和时的

33
00:01:41,750 --> 00:01:44,520
排名总数为 1

34
00:01:44,520 --> 00:01:47,400
这比排名之和

35
00:01:47,400 --> 00:01:49,600
是网页总数更有意义

36
00:01:49,600 --> 00:01:52,230
N 将是网页总数 即原始数据中的网页总数

37
00:01:52,230 --> 00:01:56,150
d 是阻尼常量

38
00:01:56,150 --> 00:02:00,770
现在将更改初始值 除以 N

39
00:02:00,770 --> 00:02:03,500
这意味着一开始的网页排名之和将为 1

40
00:02:03,500 --> 00:02:06,970
我们将更改排名的计算方法

41
00:02:08,100 --> 00:02:11,190
在后面加上。。。

42
00:02:11,190 --> 00:02:14,350
表示重新开始 我们在这里要使用的值

43
00:02:14,350 --> 00:02:16,970
将是 1 减去 d 再除以 N

44
00:02:16,970 --> 00:02:20,890
这就表示我们不决定从新的网页开始的概率

45
00:02:20,890 --> 00:02:23,480
0.8 的时候我们决定

46
00:02:23,480 --> 00:02:26,800
打开新的网页

47
00:02:26,800 --> 00:02:29,920
将这个乘以 d 我们不打开新网页的概率

48
00:02:29,920 --> 00:02:34,120
即 1-d 我们从头开始

49
00:02:34,120 --> 00:02:36,340
除以 N 因为 N 表示网页数量

50
00:02:36,340 --> 00:02:39,080
从而表示这是我们从头开始时

51
00:02:39,080 --> 00:02:42,060
选择该网页的概率

52
00:02:42,060 --> 00:02:46,740
现在就得出了网页排名的递归定义

53
00:02:46,740 --> 00:02:49,200
我们先从时间 0 时的排名开始 到 1 除以 N

54
00:02:49,200 --> 00:02:52,130
然后经过多次计算

55
00:02:52,130 --> 00:02:55,820
我们将通过使用该公式

56
00:02:55,820 --> 00:02:59,570
不断完善我们的结果 对于每个链接到我们的链接

57
00:02:59,570 --> 00:03:02,030
我们都计算上一步长的受欢迎程度 除以向外链接数量

58
00:03:02,030 --> 00:03:05,290
即除以链接到该网页的其他网页的数量

59
00:03:05,290 --> 00:03:09,290
乘以阻尼常量

60
00:03:09,290 --> 00:03:13,020
得出该网页被随机网络冲浪器选中的概率

61
00:03:13,020 --> 00:03:15,520
然后加上表示随机网络冲浪器

62
00:03:15,520 --> 00:03:18,680
可能从头开始并选择新的随机网页的项

63
00:03:18,680 --> 00:03:21,800
在尝试更改网络搜索引擎

64
00:03:21,800 --> 00:03:24,730
以便实际地编程之前

65
00:03:24,730 --> 00:03:30,960
先做道测验 什么是 AltaVista？如果没听过的话

66
00:03:30,960 --> 00:03:37,340
可以在 Google 或 DuckDuckGo 上进行搜索 选项如下

67
00:03:37,340 --> 00:03:39,250
是指从位于帕洛阿尔托的优达学城总部

68
00:03:39,250 --> 00:03:41,590
看到的景象 是指 1998 年最热门的

69
00:03:41,590 --> 00:03:45,740
网络搜索引擎

70
00:03:45,740 --> 00:03:49,930
是西班牙语 表示“You're Terminated, Baby!”

71
00:03:49,930 --> 00:03:53,740
是弗吉尼亚州的一个小镇 如果不知道答案 可以 Google