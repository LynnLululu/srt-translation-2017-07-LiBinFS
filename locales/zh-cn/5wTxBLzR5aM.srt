1
00:00:00,260 --> 00:00:01,830
那么我们来看几个例子

2
00:00:01,830 --> 00:00:02,920
我要创建一个字典

3
00:00:02,920 --> 00:00:04,300
然后使用花括号

4
00:00:05,880 --> 00:00:09,080
在某些键盘上 它是 shift 加方括号键

5
00:00:09,080 --> 00:00:11,680
也可能在键盘上的其他位置

6
00:00:11,680 --> 00:00:13,390
我们用花括号

7
00:00:13,390 --> 00:00:14,940
列出字典中的元素

8
00:00:14,940 --> 00:00:17,660
字典的每个元素都是一个键值对

9
00:00:17,660 --> 00:00:21,610
字典中的条目将是元素及其原子

10
00:00:21,610 --> 00:00:25,680
序数 我们有字符串 hydrogen 及其原子序数 1

11
00:00:25,680 --> 00:00:27,810
和 carbon 及其序数 6

12
00:00:27,810 --> 00:00:29,190
那么我们成功创建了字典

13
00:00:29,190 --> 00:00:34,770
将它打印出来时 我们会看到字典的元素

14
00:00:34,770 --> 00:00:36,260
你可能会注意到一点

15
00:00:36,260 --> 00:00:39,060
它们的顺序和我们所放置的顺序不一样

16
00:00:39,060 --> 00:00:43,040
如果你想一下我们创建哈希表时的情形 这就不足为奇了

17
00:00:43,040 --> 00:00:45,990
当我们在哈希表中放置元素时 它们最终

18
00:00:45,990 --> 00:00:48,880
在表中的位置取决于键和哈希函数

19
00:00:48,880 --> 00:00:51,210
而不一定是我们放置的位置

20
00:00:51,210 --> 00:00:53,630
那么对于字典 因为它的实现与哈希表一样

21
00:00:53,630 --> 00:00:54,890
所以也是一样的道理

22
00:00:54,890 --> 00:00:55,770
它们不像列表一样

23
00:00:55,770 --> 00:00:58,980
所有的元素都是有序的 字典的元素是无序的

24
00:00:58,980 --> 00:01:00,390
所以当我们把它打印出来时

25
00:01:00,390 --> 00:01:03,000
它们的顺序会与我们放置的顺序不同

26
00:01:04,000 --> 00:01:06,670
我们可以使用索引来查找其中一个元素

27
00:01:06,670 --> 00:01:10,780
现在 我们查找与 hydrogen 关联的值 就会得到 1

28
00:01:10,780 --> 00:01:15,580
查找与 carbon 关联的值 就会得到 6

29
00:01:15,580 --> 00:01:18,430
那如果我们查找字典中没有的一个值 你认为

30
00:01:18,430 --> 00:01:19,250
会发生什么？

31
00:01:19,250 --> 00:01:22,190
现在我们查找与 lithium 关联的值

32
00:01:22,190 --> 00:01:23,980
我们会得到一个错误

33
00:01:23,980 --> 00:01:25,220
称为 KeyError

34
00:01:25,220 --> 00:01:28,340
KeyError 它说明此元素不在字典中

35
00:01:28,340 --> 00:01:31,330
这和我们在哈希表中定义的查询不同 是不是？

36
00:01:31,330 --> 00:01:35,200
我们定义了在元素不存在的情况下返回 none (无)

37
00:01:35,200 --> 00:01:36,900
而构建的这个字典类型

38
00:01:36,900 --> 00:01:39,170
在不存在元素的情况下向我们返回错误

39
00:01:39,170 --> 00:01:40,930
如果我们不想得到这样的错误

40
00:01:40,930 --> 00:01:44,560
我们可以使用 in 来看看元素是否在字典中

41
00:01:44,560 --> 00:01:48,640
这里的 in 与列表中 in 的行为类似

42
00:01:48,640 --> 00:01:51,220
我们可以说 ‘lithium’ in elements

43
00:01:52,650 --> 00:01:57,210
如果键在字典中 它会给出 True 否则会给出 False

44
00:01:57,210 --> 00:01:59,550
那么现在 对这个键来说　命令执行结果是 False

45
00:01:59,550 --> 00:02:03,820
我之前说过 字典是可变的 也就是说我们可以添加新元素

46
00:02:03,820 --> 00:02:06,880
添加元素的方式 就是使用赋值

47
00:02:06,880 --> 00:02:09,690
我们添加 lithium 给它一个值 3

48
00:02:09,690 --> 00:02:15,450
注意我们之前在查询这个元素时 出现了错误

49
00:02:15,450 --> 00:02:18,940
当它在赋值的左侧时 即为更新

50
00:02:18,940 --> 00:02:21,400
它对应一项哈希表更新

51
00:02:21,400 --> 00:02:24,110
lithium 为键 而 3 是它的值

52
00:02:24,110 --> 00:02:26,210
我们可以添加另一个元素

53
00:02:26,210 --> 00:02:27,130
下面再来添加一个元素

54
00:02:27,130 --> 00:02:29,120
我们添加 nitrogen

55
00:02:29,120 --> 00:02:34,170
现在 我们查找 nitrogen 就会得到赋予 nitrogen 的值

56
00:02:34,170 --> 00:02:35,100
即 8

57
00:02:35,100 --> 00:02:38,100
事实上 8 不是正确的答案

58
00:02:38,100 --> 00:02:40,820
nitrogen 的原子序数应该为 7

59
00:02:40,820 --> 00:02:45,530
那我们可以用另一个赋值修改它的值

60
00:02:45,530 --> 00:02:48,470
再一次 它和哈希表更新一样

61
00:02:48,470 --> 00:02:52,050
它不会创建一个新的键值 因为键 nitrogen 已经存在了

62
00:02:52,050 --> 00:02:53,410
但是它会更新这个值

63
00:02:53,410 --> 00:02:57,350
现在 与 nitrogen 关联的值为 7

64
00:02:57,350 --> 00:03:01,330
可以看到第一次打印的值是 8

65
00:03:01,330 --> 00:03:03,444
而现在第二次打印的值是 7
