1
00:00:00,710 --> 00:00:02,740
答案如下 那么对于第一个问题

2
00:00:02,740 --> 00:00:07,268
我们有 12%3  12 等于

3
00:00:07,268 --> 00:00:10,205
4*3 所以这意味着 如果我们将

4
00:00:10,205 --> 00:00:14,424
12 除以 3 我们得到 4 没有余数 所以

5
00:00:14,424 --> 00:00:16,608
这意味着 12 对 3 取模的结果为零

6
00:00:16,608 --> 00:00:20,390
对于第二个问题 我们可以通过

7
00:00:20,390 --> 00:00:23,180
搞清楚 ord('a') 是什么来解决 但我们其实并不

8
00:00:23,180 --> 00:00:25,912
真的需要 我们知道 ord 的值

9
00:00:25,912 --> 00:00:28,020
对于 'a' 来说 永远都是相同的

10
00:00:28,020 --> 00:00:30,790
因此 这就是说 相同的值

11
00:00:30,790 --> 00:00:33,820
对一个相同的值取模 结果总会是零

12
00:00:33,820 --> 00:00:37,970
因为任何东西除以它本身都是没有余数的

13
00:00:37,970 --> 00:00:41,610
所以 这个问题的答案也是零 对于 C 部分 现在

14
00:00:41,610 --> 00:00:44,800
我们加了 3 要知道这里的结果是什么

15
00:00:44,800 --> 00:00:47,850
我们必须知道 ord('z') 是大于

16
00:00:47,850 --> 00:00:51,030
还是小于 3 只要 ord('z')

17
00:00:51,030 --> 00:00:53,950
比 3 大 然后这就意味着 ord('z')

18
00:00:53,950 --> 00:00:57,480
加 3 的值对 ord('z') 取模一定是 3

19
00:00:57,480 --> 00:00:59,780
因为余数就是我们在 ord('z') 上加的值

20
00:00:59,780 --> 00:01:02,690
因为 ord('z') 本身总是可以被

21
00:01:02,690 --> 00:01:05,319
ord('z') 整除 同时 我们也知道 ord('z')

22
00:01:05,319 --> 00:01:08,160
是大于 3 的 所以这意味着结果将

23
00:01:08,160 --> 00:01:10,340
是 3 那么让我们在 Python 解释器中尝试

24
00:01:10,340 --> 00:01:15,690
一下最后一题 我们要打印

25
00:01:15,690 --> 00:01:21,190
(ord('z') + 3) % ord('z') 的值 当我们运行它 我们看到结果是 3

26
00:01:21,190 --> 00:01:23,530
然后我想指出的是 这里的括号

27
00:01:23,530 --> 00:01:27,110
实际上很重要 如果我们没有括起来

28
00:01:27,110 --> 00:01:32,610
我们尝试 ord('z') + 3 % ord('z')

29
00:01:32,610 --> 00:01:35,700
那么我们得到的结果是 125 原因

30
00:01:35,700 --> 00:01:38,320
是 这里的分组是将

31
00:01:38,320 --> 00:01:42,060
3 % ord('z')分组 然后再加到前面

32
00:01:42,060 --> 00:01:47,290
所以这是一个不同的值 我们得到 125 的原因是

33
00:01:47,290 --> 00:01:52,410
ord('z') 本身的值是 122 所以这是 122 也就是

34
00:01:52,410 --> 00:01:57,746
ord('z') 加上 3 % ord('z') 也就是 3 % 122 也就是 3

35
00:01:57,746 --> 00:02:02,810
这就是为什么我们评估没有括号的值时 得到 125 的原因

