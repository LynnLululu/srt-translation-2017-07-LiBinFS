1
00:00:00,000 --> 00:00:05,000
与之前的感觉幸运 (Feeling Lucky) 练习不同

2
00:00:05,000 --> 00:00:10,000
之前我们希望修改搜索引擎 以使其返回最高排名结果

3
00:00:10,000 --> 00:00:17,000
现在我们希望 创建一个根据排名对结果排序的新函数

4
00:00:17,000 --> 00:00:22,000
现在为了做到这一点 我们需要解决的是排序

5
00:00:22,000 --> 00:00:27,000
我们需要能够根据排名对页面进行排序

6
00:00:27,000 --> 00:00:29,000
这是一个已经被充分研究的问题

7
00:00:29,000 --> 00:00:32,000
也是算法的一个典型范例

8
00:00:32,000 --> 00:00:36,000
为了本课程的目标 以及对递归知识的加强

9
00:00:36,000 --> 00:00:39,000
我们将使用快速排序 (Quicksort) 算法

10
00:00:39,000 --> 00:00:42,000
Quicksort 很有趣 因为它令人难以置信的优雅

11
00:00:42,000 --> 00:00:47,000
是一种递归算法 并且恰好是你可以做排序的最快的方法之一

12
00:00:47,000 --> 00:00:49,000
我们将在几行代码内完成这个算法

13
00:00:49,000 --> 00:00:54,000
在我们开始之前 我将快速讲解 Quicksort 的工作原理

14
00:00:54,000 --> 00:00:57,000
假设 我们有 5 个元素的一个列表

15
00:00:57,000 --> 00:00:59,000
我们将对其使用 Quicksort 算法

16
00:00:59,000 --> 00:01:02,000
我们需要做的第一件事是选择一个支点

17
00:01:02,000 --> 00:01:06,000
很多实现方式会随机选择一个支点 但是如果我们假设

18
00:01:06,000 --> 00:01:09,000
我们给出的数据是随机分布的 则无所谓

19
00:01:09,000 --> 00:01:12,000
所以让我们选择第一个元素作为我们的支点

20
00:01:12,000 --> 00:01:15,000
这使得编码更简单 也更容易遍历

21
00:01:15,000 --> 00:01:20,000
我们现在要做的是将剩余的元素区分开来 根据

22
00:01:20,000 --> 00:01:26,000
该元素小于支点 还是大于支点

23
00:01:26,000 --> 00:01:27,000
所以让我们这样做

24
00:01:27,000 --> 00:01:30,000
所以我们有我们的支点 2 现在我们将遍历其他元素

25
00:01:30,000 --> 00:01:33,000
并确定它们是否大于或小于 2

26
00:01:33,000 --> 00:01:35,000
一个很简单的操作

27
00:01:35,000 --> 00:01:37,000
所以 1 小于 2 我们将把它添加到此列表

28
00:01:37,000 --> 00:01:39,000
8 大于 2

29
00:01:39,000 --> 00:01:44,000
0 小于 2 注意我并没有打扰子表的排序

30
00:01:44,000 --> 00:01:50,000
我们将通过递归 Quicksort 到每一侧的子列表来处理

31
00:01:50,000 --> 00:01:53,000
9 大于 2 我们完成了

32
00:01:53,000 --> 00:01:55,000
我们有了一个“部分排序”的列表

33
00:01:55,000 --> 00:01:58,000
小于 2 的所有元素都在左边

34
00:01:58,000 --> 00:02:01,000
大于 2 的所有元素在右边

35
00:02:01,000 --> 00:02:05,000
所以我们要做的是 我们要对左边重复同样的操作

36
00:02:05,000 --> 00:02:07,000
对右边重复同样的操作

37
00:02:07,000 --> 00:02:11,000
最后 当我们排序了所有元素 就将它们组合到一起

38
00:02:11,000 --> 00:02:13,000
然后我们就有了一个排序后的列表

39
00:02:13,000 --> 00:02:15,000
那么 让我们快速过一遍

40
00:02:15,000 --> 00:02:18,000
这里 1 是支点 我们得到 1

41
00:02:18,000 --> 00:02:19,000
0 小于 1

42
00:02:19,000 --> 00:02:23,000
这里 8 是支点 9 大于 8

43
00:02:23,000 --> 00:02:25,000
这里我们完成了 这里也完成了

44
00:02:25,000 --> 00:02:28,000
现在我们剩下的都是单元素列表

45
00:02:28,000 --> 00:02:34,000
我们对其中的每一个执行 Quicksort 单元素的列表是排序后的

46
00:02:34,000 --> 00:02:36,000
所以我们最终完成了排序

47
00:02:36,000 --> 00:02:39,000
我们现在追加到一起

48
00:02:39,000 --> 00:02:44,000
因此 所有这些附加后的最终结果将是我们的排序列表

49
00:02:44,000 --> 00:02:48,000
为了表示我们完成了列表 让我们称之为 conquer (征服)

50
00:02:48,000 --> 00:02:50,000
希望这些可以让你对我们在做的事情有一个认知

51
00:02:50,000 --> 00:02:54,000
那么 让我们去写代码吧 如果你感到困惑 代码可能使你更清楚一点

52
00:02:54,000 --> 00:02:56,000
ordered_search 包含 3 个参数

53
00:02:56,000 --> 00:03:01,000
索引、页面排名和我们要搜索的关键字

54
00:03:01,000 --> 00:03:05,000
我将查找与该关键字关联的页面

55
00:03:05,000 --> 00:03:09,000
然后我将对这些页面进行 Quicksort 根据传入 ordered_search 的

56
00:03:09,000 --> 00:03:10,000
页面排名参数

57
00:03:10,000 --> 00:03:13,000
这是我们必须定义的另一个函数

58
00:03:13,000 --> 00:03:16,000
所以我传入两个列表 ——

59
00:03:16,000 --> 00:03:21,000
url 和那些 url 的排名 它被存储为一个字典

60
00:03:21,000 --> 00:03:25,000
所以如果我没有得到任何页面传入 或者它是一个空列表

61
00:03:25,000 --> 00:03:28,000
然后我不需要做任何事情就可以停止了

62
00:03:28,000 --> 00:03:33,000
这省去了一些情况的考虑 如果我们现在不这样做 稍后会略微复杂

63
00:03:33,000 --> 00:03:36,000
那么我要做的第一件事是找到支点

64
00:03:36,000 --> 00:03:38,000
即第一个页面的排名

65
00:03:38,000 --> 00:03:41,000
这基本上是按照我们刚才的例子的做法

66
00:03:41,000 --> 00:03:45,000
我们初始化 2 个列表 better_list 和 worse_list

67
00:03:45,000 --> 00:03:50,000
现在我们要遍历每个页面 并将它们放在正确的列表中

68
00:03:50,000 --> 00:03:53,000
你可能注意到的一件事是 我没有遍历所有页面

69
00:03:53,000 --> 00:03:54,000
我跳过了第一个

70
00:03:54,000 --> 00:03:58,000
这使得代码更简单一些

71
00:03:58,000 --> 00:03:59,000
因为我已经将该页面作为支点

72
00:03:59,000 --> 00:04:03,000
当我们把所有页面都放在正确的列表中 我们将重复

73
00:04:03,000 --> 00:04:06,000
为了使列表连接正常工作

74
00:04:06,000 --> 00:04:10,000
你需要将这些页面放到另一个列表中

75
00:04:10,000 --> 00:04:17,000
这是我在最后展示的列表追加 这是我之前展示的递归

76
00:04:17,000 --> 00:04:18,000
这就是全部的 Quicksort

77
00:04:18,000 --> 00:04:22,000
我们用了 13-14 行代码

78
00:04:22,000 --> 00:04:25,000
如果想要的话 还可以更少行

79
00:04:25,000 --> 00:04:29,000
不过我们只是要递归 并且我们做到了

80
00:04:29,000 --> 00:04:34,000
再快速过一遍 如果我们的列表上有一个页面或没有页面

81
00:04:34,000 --> 00:04:38,000
那么它被认为是已排序的 我们立即返回

82
00:04:38,000 --> 00:04:42,000
否则 我们找到我们的支点 我们要选择第一个元素做支点

83
00:04:42,000 --> 00:04:47,000
对于其余的元素 我们将把它们放在适当的更差或更好的列表

84
00:04:47,000 --> 00:04:49,000
如果它们有更差或更好的排名

85
00:04:49,000 --> 00:04:53,000
然后我们将对每个子列表递归 一旦完成

86
00:04:53,000 --> 00:04:56,000
我们将把它们全部附加在一起
