1
00:00:00,830 --> 00:00:03,230
我们要引入一个新的列表操作

2
00:00:03,230 --> 00:00:06,410
会对构建我们的网络爬虫非常有用 这就是

3
00:00:06,410 --> 00:00:09,700
pop 操作 pop 是这样工作的 我们有一个列表

4
00:00:09,700 --> 00:00:11,790
我们有 .pop 这与使用

5
00:00:11,790 --> 00:00:15,190
find 方法类似 pop 没有输入

6
00:00:15,190 --> 00:00:17,730
但是我们仍然需要括号表明我们

7
00:00:17,730 --> 00:00:21,870
正在调用过程 它的输出是列表中的

8
00:00:21,870 --> 00:00:25,760
一个元素 pop 操作会改变列表的值

9
00:00:25,760 --> 00:00:28,140
它会移除列表的最后一个元素

10
00:00:28,140 --> 00:00:31,270
它也返回该元素的值

11
00:00:31,270 --> 00:00:35,360
这里有一个例子 如果我们开始初始化

12
00:00:35,360 --> 00:00:37,240
变量 a 是列表 [1, 2, 3]

13
00:00:37,240 --> 00:00:44,230
然后 我们将变量 b 作为 a 的别名 所以这里就是我们经过这

14
00:00:44,230 --> 00:00:47,540
两个语句后的内容 我们创建了一个新的列表

15
00:00:47,540 --> 00:00:50,810
该列表有元素1 2 3 和一个指向

16
00:00:50,810 --> 00:00:55,660
该列表的变量 在将 a 赋值给 b 的语句后 b 也指向

17
00:00:55,660 --> 00:01:00,550
该列表 那么我们给 x 赋值

18
00:01:00,550 --> 00:01:05,960
a.pop() 赋值给 x 因此 x 的值为 3

19
00:01:05,960 --> 00:01:11,270
这就是之前的最后一个元素 这就是我们由 pop 操作返回的

20
00:01:11,270 --> 00:01:16,150
但它也同时改变了列表的值 它会删除该元素 所以现在

21
00:01:16,150 --> 00:01:19,306
变量 a 指向列表 [1, 2] 由于 b 也是 a 指向的列表

22
00:01:19,306 --> 00:01:23,571
它也改变了 b 的值  b 现在是这个列表 [1, 2]

