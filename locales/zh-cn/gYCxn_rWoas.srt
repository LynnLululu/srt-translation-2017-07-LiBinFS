1
00:00:00,000 --> 00:00:02,831
答案是 该过程确实能做一些工作

2
00:00:02,831 --> 00:00:04,814
它能得出一个输出

3
00:00:04,815 --> 00:00:08,492
如果它使用数字作为输入 就会得出数字之和

4
00:00:08,492 --> 00:00:12,000
但如果我们传入字符串 它也能够工作

5
00:00:12,000 --> 00:00:14,354
它会生成2个字符串的连接

6
00:00:14,354 --> 00:00:15,969
因为 “+” 操作符

7
00:00:15,969 --> 00:00:18,000
对字符串和数字都能运行

8
00:00:18,000 --> 00:00:22,000
考虑到求和这个名称 用它来做数字求和更合理

9
00:00:22,000 --> 00:00:25,000
但使用字符串时 它也能够运行良好

10
00:00:25,000 --> 00:00:30,000
让我为你展示一下它在 Python 解释器当中的运行

11
00:00:30,000 --> 00:00:34,000
现在 我们改动了求和过程 让它返回a的值

12
00:00:34,000 --> 00:00:36,338
我有2个字符串变量

13
00:00:36,338 --> 00:00:41,000
我们用 s 指代 'Hello ' 结尾处空一格 用 t 指代 'Dave!’

14
00:00:41,000 --> 00:00:44,000
现在调用求和过程 传入s和t

15
00:00:44,000 --> 00:00:49,000
我得出的结果就是 Hello Dave！

16
00:00:49,000 --> 00:00:51,000
注意 它并没有改变s的值

17
00:00:51,000 --> 00:00:53,000
s 是传入的第一个输入

18
00:00:53,000 --> 00:00:55,291
即使我们改变了a的值

19
00:00:55,291 --> 00:00:57,568
也不会改变s的值

