1
00:00:00,106 --> 00:00:02,268
我们的下一个问题来自学生 Kirk Charles

2
00:00:02,268 --> 00:00:03,890
他在这儿有一个相当不错的叙述

3
00:00:03,890 --> 00:00:07,038
好 “我们知道彼得对发布他的新的搜索引擎业务

4
00:00:07,038 --> 00:00:09,092
感到非常兴奋” 这是真的

5
00:00:09,092 --> 00:00:11,411
SearchWithPeter.info 确实上线了

6
00:00:11,411 --> 00:00:14,652
- 它确实是一个非常棒的网站 - 对 我为它做很多工作

7
00:00:14,652 --> 00:00:16,493
Web 2.0 还有其他一切

8
00:00:16,493 --> 00:00:19,611
“我们假设他正在把目标放在政府扶持力度不大的

9
00:00:19,611 --> 00:00:21,694
克林贡语言(《星际迷航》中克林贡人使用的语言)网络搜索市场

10
00:00:21,694 --> 00:00:24,122
我们还假设他正在写一些

11
00:00:24,122 --> 00:00:26,427
专门的哈希函数 8个月后

12
00:00:26,427 --> 00:00:30,018
业务量有爆炸性增长” 我希望如此 “彼得发现

13
00:00:30,018 --> 00:00:32,402
他需要将哈希表中的桶的数量翻一番

14
00:00:32,402 --> 00:00:35,801
他还发现由于没透彻地理解克林贡语的哈希搜索方法 

15
00:00:35,801 --> 00:00:38,237
哈希桶的使用并不均匀”

16
00:00:38,237 --> 00:00:40,337
听起来是个挺难的问题

17
00:00:40,337 --> 00:00:42,938
所以 他的问题是 “我们怎样才能在服务不中断的情况下

18
00:00:42,938 --> 00:00:45,624
重新计算索引? 这样一个事实让问题变得更困难

19
00:00:45,624 --> 00:00:47,741
如果他推迟给出搜索结果  

20
00:00:47,741 --> 00:00:51,123
他的基础用户会变得具有攻击性  此外 大的星际网络时延 

21
00:00:51,123 --> 00:00:53,355
意味着他需要谨慎地

22
00:00:53,355 --> 00:00:55,924
推出新的哈希表”

23
00:00:55,924 --> 00:00:58,305
他 我想是我 应该采取哪个策略?

24
00:00:58,305 --> 00:01:00,538
哇 Kirk 舰长的问题确实很不错

25
00:01:00,538 --> 00:01:05,340
我真高兴他正在期待 SearchWithPeter.info 的成功 

26
00:01:05,340 --> 00:01:09,123
并且 思考未来是一件非常重要的事

27
00:01:09,123 --> 00:01:13,142
我觉得我了解的一件事情是克林贡域名服务器

28
00:01:13,142 --> 00:01:16,086
不支持域名 .info 所以我觉得你现在大概

29
00:01:16,086 --> 00:01:19,836
安全地避开了克林贡人的攻击 但是当你重新构建哈希表时 

30
00:01:19,836 --> 00:01:22,628
它是一个好的思考题

31
00:01:22,628 --> 00:01:24,156
我们已经讨论了

32
00:01:24,156 --> 00:01:26,574
一个哈希表正常的工作方式

33
00:01:26,574 --> 00:01:29,208
一旦桶太满 或者负载量过高

34
00:01:29,208 --> 00:01:31,619
你想创建一个新的有更多桶的哈希表

35
00:01:31,619 --> 00:01:33,609
并且你得将所有的元素拷贝到新的哈希表

36
00:01:33,609 --> 00:01:36,569
如果你正在维护一个大的类似 SearchWithPeter.info 的服务

37
00:01:36,569 --> 00:01:40,140
当重建哈希表时你不想关闭你的服务

38
00:01:40,140 --> 00:01:42,137
那样会让人相当恼火

39
00:01:42,137 --> 00:01:45,343
如果他们是克林贡人 你不会想让他们生气的

40
00:01:45,343 --> 00:01:49,525
那么 你会怎么做来替代老的哈希表呢 可以做很多

41
00:01:49,525 --> 00:01:51,407
不同的事情 虽然我不知道谷歌是怎么做的

42
00:01:51,407 --> 00:01:54,807
我确信有很多可能的解决方法

43
00:01:54,807 --> 00:01:56,920
他们已经搞清楚某些有效可行的东西

44
00:01:56,920 --> 00:01:59,311
一个事情是开始一个新的拷贝

45
00:01:59,311 --> 00:02:02,506
这样 你让搜索引擎持续运行 

46
00:02:02,506 --> 00:02:04,093
仍然使用老的哈希表回应搜索请求

47
00:02:04,093 --> 00:02:06,107
但是你在不同的电脑上开始一个独立的运行进程

48
00:02:06,107 --> 00:02:08,120
做的事情是生成一个新的

49
00:02:08,120 --> 00:02:10,657
包含大量桶的哈希表的拷贝

50
00:02:10,657 --> 00:02:13,275
接着 当你把这些做完 你把它们切换过来

51
00:02:13,275 --> 00:02:16,361
你以后就一直让那个更大的包含新桶的哈希表工作

52
00:02:16,361 --> 00:02:18,968
当你这样做 除了切换的时候 

53
00:02:18,968 --> 00:02:21,712
服务都没有中断 有些东西

54
00:02:21,712 --> 00:02:23,459
使得这种方法很难实现 你不得不担心

55
00:02:23,459 --> 00:02:25,706
“嗯 当你在拷贝哈希表的过程中 

56
00:02:25,706 --> 00:02:27,720
如果有一个新的录入要添加到哈希表中怎么办”

57
00:02:27,720 --> 00:02:30,521
你可以锁死它 使它在那个时段 

58
00:02:30,521 --> 00:02:32,874
不能再添加任何新的录入 如果拷贝的时间过长 

59
00:02:32,874 --> 00:02:35,520
那将是件糟糕的事情 

60
00:02:35,520 --> 00:02:37,470
你或许可以把这个录入添加到这两个哈希表中

61
00:02:37,470 --> 00:02:39,226
每一次添加一个新的录入

62
00:02:39,226 --> 00:02:41,458
你把它加入到原始的和你正在开发的这两个哈希表里

63
00:02:41,458 --> 00:02:45,971
你可以将更新存起来 然后在你完成拷贝之后

64
00:02:45,971 --> 00:02:47,723
再把它们全部应用起来

65
00:02:47,723 --> 00:02:49,634
为了使搜索引擎持续工作 

66
00:02:49,634 --> 00:02:51,390
还有很多困难的问题需要解决

67
00:02:51,390 --> 00:02:53,460
但是 这绝对是一个重要的需要考虑的问题

68
00:02:53,460 --> 00:02:56,010
如果你正在构建 SearchWithPeter.info

69
00:02:56,010 --> 00:02:57,788
那么你会有很多怒气冲冲的克林贡用户

70
00:02:57,788 --> 00:02:59,709
- 大概我应该正在做笔记 - 取决于服务的好坏

71
00:02:59,709 --> 00:03:02,176
嗯 是这样的 希望克林贡人

72
00:03:02,176 --> 00:03:03,726
不知道你住在哪

73
00:03:03,726 --> 00:03:05,975
我们最近已经有了50个用户

74
00:03:05,975 --> 00:03:07,989
使用 SearchWithPeter.info 了

75
00:03:07,989 --> 00:03:09,969
我们吃了一个蛋糕 举行了一场聚会 聚会是相当酷的

76
00:03:09,969 --> 00:03:13,000
- 那太棒了 恭喜你 - 谢了
