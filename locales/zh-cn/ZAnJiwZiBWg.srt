1
00:00:00,000 --> 00:00:03,000
我们到目前为止所做的一切都非常有限

2
00:00:03,000 --> 00:00:06,000
我们必须对所有的数据进行同样的处理

3
00:00:06,000 --> 00:00:09,000
我们无法做任何真正依赖于数据本身的事情

4
00:00:09,000 --> 00:00:12,000
下面我们要做的是找到一个方法

5
00:00:12,000 --> 00:00:14,000
来让代码根据决定以不同的方式运行

6
00:00:14,000 --> 00:00:17,000
首先 我们要做的是找到一些方法来做比较

7
00:00:17,000 --> 00:00:20,000
这样我们就有一个方法来测试并决定我们应该做什么

8
00:00:20,000 --> 00:00:24,000
Python 提供很多不同的操作符来做比较

9
00:00:24,000 --> 00:00:26,000
有一些和我们在数学中用到的很相似

10
00:00:26,000 --> 00:00:29,000
我们有一个用于比较2个数字的小于号

11
00:00:29,000 --> 00:00:30,000
我们也有大于号

12
00:00:30,000 --> 00:00:33,000
我们有像小于等于这样的操作符

13
00:00:33,000 --> 00:00:39,000
所有这些都用于数字 所以我们可以先有一个数字

14
00:00:39,000 --> 00:00:43,000
后面加上一个比较运算符 后面再加上另一个数字

15
00:00:43,000 --> 00:00:47,000
这和我们之前看到的算术表达式的语法非常相似

16
00:00:47,000 --> 00:00:50,000
但是现在我们不在这里使用加号或乘号

17
00:00:50,000 --> 00:00:52,000
我们可以用一个做比较的操作符

18
00:00:52,000 --> 00:00:54,000
比较的输出并不是一个数字

19
00:00:54,000 --> 00:00:59,000
而是一个布尔值 布尔值就是两者取其一

20
00:00:59,000 --> 00:01:04,000
布尔值不是 True (真) 就是 False (假)

21
00:01:04,000 --> 00:01:07,000
让我们看一些 Python 解释器中的例子

22
00:01:07,000 --> 00:01:10,815
首先 我们会用小于号来比较2和3

23
00:01:10,815 --> 00:01:14,000
所以2小于3 我们希望结果是 True

24
00:01:14,000 --> 00:01:17,000
在运行程序时 我们看到结果是 True

25
00:01:17,000 --> 00:01:21,000
如果我们比较3和一个比3大的数字 比如21小于3

26
00:01:21,000 --> 00:01:23,000
结果就是 False 

27
00:01:23,000 --> 00:01:26,000
我们可以写出任意的比较表达式

28
00:01:26,000 --> 00:01:29,950
我们可以写7乘以3小于21

29
00:01:29,950 --> 00:01:33,692
当运行这个程序时 我们也会得到 False 的结果 因为7乘以3等于21

30
00:01:33,692 --> 00:01:36,000
而不是小于21

31
00:01:36,000 --> 00:01:40,460
另外一个我们可以用的比较运算符是不等于

32
00:01:40,460 --> 00:01:44,000
!= 的意思是不等于

33
00:01:44,000 --> 00:01:50,708
所以7乘以3不等于21是错误的 因为7乘以3等于21

34
00:01:50,708 --> 00:01:56,000
如果我们想要做等式比较 我们不用等号

35
00:01:56,000 --> 00:01:57,000
我们用2个等号

36
00:01:57,000 --> 00:01:59,000
我们称之为双等于号

37
00:01:59,000 --> 00:02:05,000
所以现在我们有 7x3==21 结果是 True

38
00:02:05,000 --> 00:02:08,000
现在我们将要进行一个练习 来看一看你是否能明白

39
00:02:08,000 --> 00:02:11,369
为什么我们要在这里用双等于号而非单等于号

40
00:02:14,754 --> 00:02:19,000
问题：为什么等式比较要用双等于号

41
00:02:19,000 --> 00:02:24,000
即2个等号 而非1个等号

42
00:02:24,000 --> 00:02:29,000
可能的答案：因为单等于号意味着近似等于

43
00:02:29,000 --> 00:02:32,000
而我们想要的是完全的等式比较

44
00:02:32,000 --> 00:02:36,000
因为我们需要用2个字符来表示不相等的比较

45
00:02:36,000 --> 00:02:38,000
并且我们想要等式比较也有同样的长度

46
00:02:38,000 --> 00:02:42,000
因为 Guido 即 Python 的设计师 真的非常喜欢等号

47
00:02:42,000 --> 00:02:45,000
因为单等于号是赋值的意思

48
00:02:45,000 --> 00:02:49,000
或者是单是双并不重要 两个都可以用