1
00:00:00,160 --> 00:00:02,130
那么让我们测试我们的新哈希函数 看看它是否

2
00:00:02,130 --> 00:00:05,300
比之前我们定义的坏哈希函数更好

3
00:00:05,300 --> 00:00:08,200
我们将会使用我们之前定义的同一个 test_hash_function

4
00:00:08,200 --> 00:00:11,430
它将测试函数当做输入 我们不仅可以传入

5
00:00:11,430 --> 00:00:16,239
初始的 bad_string_hash 函数 也可以传入新的 hash_string 函数

6
00:00:16,239 --> 00:00:19,110
我们希望其能有更好效果 传入键 (keys) 的列表 还有 

7
00:00:19,110 --> 00:00:22,620
长度 然后计算每个键的哈希值 并且记录

8
00:00:22,620 --> 00:00:25,170
在结束时每个位置有多少键 让我们再次尝试

9
00:00:25,170 --> 00:00:28,390
我们将使用之前使用的同一个例子

10
00:00:28,390 --> 00:00:31,950
来自福尔摩斯里的文字 我们将初始化

11
00:00:31,950 --> 00:00:34,830
words 为《福尔摩斯的冒险》

12
00:00:34,830 --> 00:00:37,020
这页里的所有文字 这是我们在

13
00:00:37,020 --> 00:00:39,880
网上下载的 所以 首先我们将会再次测试

14
00:00:39,880 --> 00:00:43,450
旧的哈希函数 bad_hash_string

15
00:00:43,450 --> 00:00:47,040
获得 counts 值并把它们打印出来 记住

16
00:00:47,040 --> 00:00:50,580
它们是什么样子 所以这是一个相当不好的分布

17
00:00:50,580 --> 00:00:56,580
和我们之前看的一样 一个桶中的数量 从 725 一直到超过 2000

18
00:00:56,580 --> 00:00:59,348
现在让我们尝试新的

19
00:00:59,348 --> 00:01:05,040
哈希函数 替换掉 bad_hash_string 我们将传入

20
00:01:05,040 --> 00:01:07,760
平坦的 hash_string 我们将使用相同的 words

21
00:01:07,760 --> 00:01:10,070
相同数目的桶 我们来看看

22
00:01:10,070 --> 00:01:12,720
现在的分布 它比之前好多了

23
00:01:12,720 --> 00:01:15,450
现在没有一个值低于 1000 

24
00:01:15,450 --> 00:01:19,960
也没有一个值超过位于第一个桶的

25
00:01:19,960 --> 00:01:23,740
最大值 1363 让我们以图表的形式看看

26
00:01:23,740 --> 00:01:26,590
这是我们之前就有的 对于 bad_hash_string

27
00:01:26,590 --> 00:01:29,090
函数 我们可以观察到桶的大小变化

28
00:01:29,090 --> 00:01:30,970
相当明显 我们通过红蓝条

29
00:01:30,970 --> 00:01:34,250
可以看出有一些桶频次很高 而另一些则不够高

30
00:01:34,250 --> 00:01:37,950
对于新的哈希函数 变化则不那么明显

31
00:01:37,950 --> 00:01:40,990
但仍然不是完美的 我们期望的是所有的柱

32
00:01:40,990 --> 00:01:44,230
每一条都尽可能相似 但是实际已经非常

33
00:01:44,230 --> 00:01:47,550
接近了 所以做得还不错 另一件我们可以

34
00:01:47,550 --> 00:01:49,900
尝试的事情是 构造更多的桶 让我们试一下

35
00:01:49,900 --> 00:01:52,570
我们做相同的事情 但是用 100 个桶取代了

36
00:01:52,570 --> 00:01:55,990
12 个 我们可以把结果打印出来 然后我们看到

37
00:01:55,990 --> 00:01:59,910
100 个桶的时候的结果 看起来还不错 但肯定

38
00:01:59,910 --> 00:02:03,306
还不完美 我们有诸如 104 这么小的桶

39
00:02:03,306 --> 00:02:06,890
也有更大一些的 有 197 的桶

40
00:02:06,890 --> 00:02:10,008
几乎是最小桶的两倍 构建一个

41
00:02:10,008 --> 00:02:13,750
更好的哈希函数是一个相当难的问题 人们付出了很多

42
00:02:13,750 --> 00:02:17,670
努力 去构建好的哈希函数 当你的表变大

43
00:02:17,670 --> 00:02:21,410
效率对哈希函数来说就变得非常重要了

44
00:02:21,410 --> 00:02:23,580
我们的哈希函数不是足够好的 以为它需要

45
00:02:23,580 --> 00:02:26,740
很长的时间来执行 如果字符串变得更长

46
00:02:26,740 --> 00:02:29,510
我们不得不对每一个字符都进行迭代 所以还有

47
00:02:29,510 --> 00:02:31,940
更好的可以使用的哈希函数 我们现在不会去

48
00:02:31,940 --> 00:02:36,010
深入那些函数了 但是关于这些有趣的哈希函数在网上

49
00:02:36,010 --> 00:02:38,330
会有相关文档的链接

50
00:02:38,330 --> 00:02:40,800
而这个哈希函数对我们来说已足够好了

51
00:02:40,800 --> 00:02:44,360
在我们真正实现一个哈希函数之前 我们有一个练习

52
00:02:44,360 --> 00:02:46,640
来确保你理解 为什么这个

53
00:02:46,640 --> 00:02:48,790
函数比之前那种原始的索引方式要好
