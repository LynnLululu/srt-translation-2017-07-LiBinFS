1
00:00:00,000 --> 00:00:07,000
在这个问题中 我们将尝试构建一个指定行数的帕斯卡三角

2
00:00:07,000 --> 00:00:11,000
你可以用递归解决这个问题 我第一次也是这样做的

3
00:00:11,000 --> 00:00:16,000
但我觉得迭代解决方案更简单 可以更直观的理解

4
00:00:16,000 --> 00:00:20,000
迭代并不总是比递归简单 但这个问题 我将用迭代方法解答

5
00:00:20,000 --> 00:00:25,000
我们要做的是 我们从第一行的列表 [1] 开始

6
00:00:25,000 --> 00:00:29,000
然后通过将上面的 2 个数字相加来构建下一个列表

7
00:00:29,000 --> 00:00:35,000
更确切地说 假设我们正在构建最后一行 我们已经构建好了上一行

8
00:00:35,000 --> 00:00:38,000
我们将在这个看不见的 0 开始

9
00:00:38,000 --> 00:00:43,000
然后我们说 这个 1 是 我们刚刚开始的 0

10
00:00:43,000 --> 00:00:49,000
和上一行的第一个元素 1 的和

11
00:00:49,000 --> 00:00:52,000
我们要更新我们的指针使其移动一步

12
00:00:52,000 --> 00:00:55,000
我们通过 1 加 3 获得元素 4

13
00:00:55,000 --> 00:00:58,000
我将一直重复这个过程

14
00:00:58,000 --> 00:01:04,000
6 = 3 + 3 、4 = 3 + 1 、1 = 1 + 0

15
00:01:04,000 --> 00:01:08,000
这很容易解释 这基本上是你

16
00:01:08,000 --> 00:01:10,000
手动构建的步骤

17
00:01:10,000 --> 00:01:15,000
但把它转化成代码可能有点复杂 可能会难到你

18
00:01:15,000 --> 00:01:16,000
所以 让我们看看它是怎么做的

19
00:01:16,000 --> 00:01:21,000
因此 如果我将三角形中的第一行初始化为 [1]

20
00:01:21,000 --> 00:01:24,000
我们现在还没有结果 所以 result 是一个空列表

21
00:01:24,000 --> 00:01:30,000
然后我将重复构建每行的过程 每次 1 行 共 n 次

22
00:01:30,000 --> 00:01:33,000
这样我们可以到第 n 行

23
00:01:33,000 --> 00:01:37,000
我们将把刚刚发现的行追加到结果列表中

24
00:01:37,000 --> 00:01:41,000
第一次 它将只是列表 [1] 因为这是三角形的开始

25
00:01:41,000 --> 00:01:44,000
然后我们将找到下一行 (make_next_row 这个函数) 我还没有定义

26
00:01:44,000 --> 00:01:48,000
然后重复此过程 将当前行追加到结果列表中

27
00:01:48,000 --> 00:01:51,000
一旦完成循环 我们将返回结果

28
00:01:51,000 --> 00:01:55,000
我们正在做的是一个很好的大纲 但我们缺少最重要的部分

29
00:01:55,000 --> 00:01:57,000
也就是 make_next_row 函数

30
00:01:57,000 --> 00:02:00,000
那么 该行将以一个空列表开始

31
00:02:00,000 --> 00:02:03,000
由于我之前有两个指针 其中一个指针为 prev

32
00:02:03,000 --> 00:02:05,000
然后另一个指针 称为 e

33
00:02:05,000 --> 00:02:10,000
正如我在说明中所说 我们将从 0 开始

34
00:02:10,000 --> 00:02:14,000
这样当我们添加 1 我们得到 1 这是三角形的边

35
00:02:14,000 --> 00:02:18,000
我们将计算当前行中的新条目

36
00:02:18,000 --> 00:02:25,000
通过将 e (这是我们右边的指针) 与初始化为 0 的 prev 相加

37
00:02:25,000 --> 00:02:26,000
所以我们得到 1

38
00:02:26,000 --> 00:02:29,000
我们将更新 prev 的值 然后下一次迭代

39
00:02:29,000 --> 00:02:32,000
e 将更新为行中的下一个值

40
00:02:32,000 --> 00:02:36,000
这个最后一行 就是将右侧的 1 包含进结果中

41
00:02:36,000 --> 00:02:41,000
一旦我们返回结果 triangle 函数就可以相应地使用 make_next_row 大功告成
