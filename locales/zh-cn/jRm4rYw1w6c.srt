1
00:00:00,200 --> 00:00:01,950
最好的方法就是使用 pop

2
00:00:01,950 --> 00:00:05,520
pop 是目前为止我们学过的 唯一一种方法能切实地

3
00:00:05,520 --> 00:00:07,990
从列表中移除元素 并且它还能

4
00:00:07,990 --> 00:00:11,690
返回那个元素 如果我们用 tocrawl.pop()

5
00:00:11,690 --> 00:00:15,270
它将会返回 tocrawl 列表中最后一个元素

6
00:00:15,270 --> 00:00:18,920
并把这个元素从列表 tocrawl 中移除 之后再把这个元素赋值给变量 page
7
00:00:18,920 --> 00:00:21,720
有一点需要注意的是 因为我们先获得的是

8
00:00:21,720 --> 00:00:25,590
最后一个元素 所以我们这样做被称为

9
00:00:25,590 --> 00:00:29,760
深度优先搜索 (depth-first search) 这意味着当我们爬取网页时

10
00:00:29,760 --> 00:00:32,450
如果我们在第一个页面有三条链接 那么

11
00:00:32,450 --> 00:00:34,810
我们将跟随最后一条链接

12
00:00:34,810 --> 00:00:38,240
之后将再把在这里找到所有链接加入页面列表中去

13
00:00:38,240 --> 00:00:41,110
在处理这些链接之前 先要跟随这条链接

14
00:00:41,110 --> 00:00:44,840
也就是最后添加的这条链接

15
00:00:44,840 --> 00:00:47,480
跟随这条链接 我们又到达了另一个页面

16
00:00:47,480 --> 00:00:50,660
继续跟随页面上最后一条链接 这就是为什么它被称为

17
00:00:50,660 --> 00:00:53,700
深度优先搜索 我们不会去处理

18
00:00:53,700 --> 00:00:57,060
第一个页面上的第二条链接 直到我们爬取过了

19
00:00:57,060 --> 00:00:59,840
所有能从第一个页面最后一条链接到达的链接

20
00:00:59,840 --> 00:01:03,098
如果我们的目标是快速得到一个页面的内容

21
00:01:03,098 --> 00:01:06,050
那么进行深度优先搜索 可能并不是最好的方法

22
00:01:06,050 --> 00:01:08,580
你最后的家庭作业中 某些问题

23
00:01:08,580 --> 00:01:12,270
会让你想出一个改变搜索顺序的方法

24
00:01:12,270 --> 00:01:15,870
这将会给我们一个更好的方法来抓取网页内容

25
00:01:15,870 --> 00:01:17,550
现在 我们可以先高兴一下

26
00:01:17,550 --> 00:01:20,840
因为对于测试网站 深度优先搜索已经足够了

27
00:01:20,840 --> 00:01:23,230
如果可以完成搜索 不管是用什么顺序

28
00:01:23,230 --> 00:01:26,080
我们都将能找到同样的一组页面

29
00:01:26,080 --> 00:01:28,140
如果我们不能完成所有搜索

30
00:01:28,140 --> 00:01:30,940
比如 对于现实的网络爬虫来说 这里有太多页面

31
00:01:30,940 --> 00:01:33,320
我们不能等到它把页面都搜索完 然后再返回结果

32
00:01:33,320 --> 00:01:35,310
这时候 搜索的顺序就会变得非常重要了
