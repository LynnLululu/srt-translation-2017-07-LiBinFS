1
00:00:00,000 --> 00:00:03,000
我们的课程有三大主题

2
00:00:03,000 --> 00:00:06,000
抽象、通用性以及递归定义

3
00:00:06,000 --> 00:00:11,000
现在回顾课程涉及的内容

4
00:00:11,000 --> 00:00:13,000
和这三个主题联系起来

5
00:00:13,000 --> 00:00:16,000
第一单元介绍了变量的概念

6
00:00:16,000 --> 00:00:19,000
用名字指定一个值

7
00:00:19,000 --> 00:00:21,000
这是一种抽象的表示

8
00:00:21,000 --> 00:00:25,000
允许我们用同一个名字指定不同的内容

9
00:00:25,000 --> 00:00:30,000
为通用性提供支持

10
00:00:30,000 --> 00:00:33,000
我们虽然能用一些变量名给另一些作定义

11
00:00:33,000 --> 00:00:35,000
但这并不是递归

12
00:00:35,000 --> 00:00:38,000
第二单元我们引入过程的概念

13
00:00:38,000 --> 00:00:40,000
这是一种明显的抽象

14
00:00:40,000 --> 00:00:44,000
将变量传给过程

15
00:00:44,000 --> 00:00:46,000
就能让同一段代码做不同的事情

16
00:00:46,000 --> 00:00:50,000
同时隐去所有细节

17
00:00:50,000 --> 00:00:52,000
过程也让通用性得以实现

18
00:00:52,000 --> 00:00:55,000
在让同一个过程做不同事情的同时

19
00:00:55,000 --> 00:00:59,000
我们也可以通过定义过程做任何事

20
00:00:59,000 --> 00:01:02,000
在第二单元还没有注意到

21
00:01:02,000 --> 00:01:05,000
我们已经可以定义任何计算机程序

22
00:01:05,000 --> 00:01:09,000
使用过程可以作递归定义

23
00:01:09,000 --> 00:01:13,000
尽管第六单元前我们都没这样做

24
00:01:13,000 --> 00:01:17,000
通过将问题拆解

25
00:01:17,000 --> 00:01:20,000
转化到基本情况予以解决

26
00:01:20,000 --> 00:01:23,000
列表是第三单元的新内容

27
00:01:23,000 --> 00:01:25,000
这是一种数据抽象

28
00:01:25,000 --> 00:01:30,000
你无需了解 Python 中的实现细节即可使用它

29
00:01:30,000 --> 00:01:32,000
递归定义也适应于列表

30
00:01:32,000 --> 00:01:35,000
一个列表可以作为其它列表的元素存在

31
00:01:35,000 --> 00:01:38,000
这在进行递归定义时很有用

32
00:01:38,000 --> 00:01:41,000
可以将任意内容存入列表也保证了通用性

33
00:01:41,000 --> 00:01:45,000
第四单元主要工作是建立索引

34
00:01:45,000 --> 00:01:48,000
借由数据标号实现

35
00:01:48,000 --> 00:01:51,000
这里有很多抽象内容

36
00:01:51,000 --> 00:01:56,000
我们将网络数据以索引形式表示

37
00:01:56,000 --> 00:01:58,000
并对检索返回相应结果

38
00:01:58,000 --> 00:02:00,000
第四单元我们还谈到了网络工作原理

39
00:02:00,000 --> 00:02:02,000
整个网络就是一种抽象

40
00:02:02,000 --> 00:02:04,000
我们发送请求

41
00:02:04,000 --> 00:02:07,000
所要内容以页面形式返回

42
00:02:07,000 --> 00:02:11,000
所有细节都被隐去

43
00:02:11,000 --> 00:02:15,000
不关注具体实现 只把网络

44
00:02:15,000 --> 00:02:17,000
看成发送请求获取页面的系统即可

45
00:02:17,000 --> 00:02:22,000
第五单元涉及代价的计算方式

46
00:02:22,000 --> 00:02:24,000
这也是一种抽象

47
00:02:24,000 --> 00:02:27,000
我们想知道随着输入规模增长

48
00:02:27,000 --> 00:02:31,000
运行代价怎样变化而不去计算具体值

49
00:02:31,000 --> 00:02:34,000
这也体现出通用性

50
00:02:34,000 --> 00:02:38,000
理解程序运行开销 需要对计算

51
00:02:38,000 --> 00:02:40,000
建立一个通用模型

52
00:02:40,000 --> 00:02:42,000
我们希望了解算法开销

53
00:02:42,000 --> 00:02:46,000
并忽略具体机器的运行情况

54
00:02:46,000 --> 00:02:48,000
之后我们介绍了哈希表

55
00:02:48,000 --> 00:02:50,000
另一种抽象数据结构

56
00:02:50,000 --> 00:02:54,000
它能够承载任何值的特点体现了通用性

57
00:02:54,000 --> 00:02:56,000
我们没有作递归定义

58
00:02:56,000 --> 00:02:59,000
当然 将哈希表作为另一个哈希表的元素是可行的

59
00:02:59,000 --> 00:03:01,000
就构成了字典的字典

60
00:03:01,000 --> 00:03:06,000
所以递归在这里也有迹可循

61
00:03:06,000 --> 00:03:10,000
最后递归过程成了第六单元的主题

62
00:03:10,000 --> 00:03:14,000
这与递归这一中心思想相合

63
00:03:14,000 --> 00:03:16,000
同时也与通用性相关

64
00:03:16,000 --> 00:03:18,000
我们展示了不使用循环

65
00:03:18,000 --> 00:03:20,000
让程序持续运行

66
00:03:20,000 --> 00:03:24,000
的方法 佐证了

67
00:03:24,000 --> 00:03:28,000
我们只需要过程 条件语句 和记录状态的方法

68
00:03:28,000 --> 00:03:30,000
就能实现所有计算机程序

69
00:03:30,000 --> 00:03:33,000
我们也看到所有使用递归过程的实现

70
00:03:33,000 --> 00:03:35,000
也能用循环来做

71
00:03:35,000 --> 00:03:37,000
所以 如果你跟随我们历览了课程所有内容

72
00:03:37,000 --> 00:03:39,000
一定学到了很多

73
00:03:39,000 --> 00:03:41,000
当你学到更多关于计算的知识

74
00:03:41,000 --> 00:03:44,000
更会发现抽象、通用性和递归定义

75
00:03:44,000 --> 00:03:47,000
三大主题统治着计算机世界

76
00:03:47,000 --> 00:03:50,000
就像你在这门课程中反复看到它们一样
