1
00:00:00,490 --> 00:00:02,180
那现在我们已经了解了 ord 函数 并且我们知道了

2
00:00:02,180 --> 00:00:04,880
模运算 我们已经准备好去定义一个哈希函数

3
00:00:04,880 --> 00:00:07,380
让我们回想我们的哈希函数应该做什么

4
00:00:07,380 --> 00:00:10,290
哈希函数有两个输入 分别是关键词

5
00:00:10,290 --> 00:00:14,000
和桶的数目 然后输出一个

6
00:00:14,000 --> 00:00:17,612
0 到桶数目减一之间的数字 这告诉我们

7
00:00:17,612 --> 00:00:22,310
字符串所属的位置 我们已经知道 ord 函数

8
00:00:22,310 --> 00:00:25,631
接受一个字母 并把它映射成

9
00:00:25,631 --> 00:00:28,940
一个数字 我们也了解了取模操作符

10
00:00:28,940 --> 00:00:31,790
取一个数字和模数可以生成

11
00:00:31,790 --> 00:00:34,680
该数字除以该模数的余数作为结果

12
00:00:34,680 --> 00:00:38,060
所以现在 我们可以用这些来定义一个

13
00:00:38,060 --> 00:00:40,600
哈希函数 我们先从一个相当不好的

14
00:00:40,600 --> 00:00:44,254
哈希函数开始 现在让我们来定义它 我们称它

15
00:00:44,254 --> 00:00:47,818
为 bad_hash_string 来确保我们记住它真的不好

16
00:00:47,818 --> 00:00:50,731
它将关键词和桶数目作为输入

17
00:00:50,731 --> 00:00:54,357
我们将根据关键词的

18
00:00:54,357 --> 00:00:57,543
首字母来输出桶 所以我们将

19
00:00:57,543 --> 00:01:00,279
对第一个字母使用 ord 函数 并且我们将会

20
00:01:00,279 --> 00:01:04,150
对桶数目取模 这就是我们简单的

21
00:01:04,150 --> 00:01:06,400
哈希函数 作为练习 我想让你回答一下

22
00:01:06,400 --> 00:01:10,097
这是一个坏哈希函数的所有原因

23
00:01:10,097 --> 00:01:13,090
记住 bad_hash_string 所做的是 它获取关键字的

24
00:01:13,090 --> 00:01:15,780
第一个字母 使用 ord 函数 将之转化为数字

25
00:01:15,780 --> 00:01:19,870
然后将该值对桶的数目取模

26
00:01:19,870 --> 00:01:23,860
这里是一些可能的原因 选出所有适用的

27
00:01:23,860 --> 00:01:26,320
第一个是它花费太长时间计算

28
00:01:26,320 --> 00:01:30,320
第二个是至少会有一个输入会使得 bad_hash_string

29
00:01:30,320 --> 00:01:32,930
产生错误 第三个是如果关键词

30
00:01:32,930 --> 00:01:35,840
像英文单词一样的分布 那么有一些桶

31
00:01:35,840 --> 00:01:38,560
会有很多单词 而其他桶则很少

32
00:01:38,560 --> 00:01:41,240
第四个选项 如果桶的数目过大的话

33
00:01:41,240 --> 00:01:43,660
会有一些桶不会存在关键词
