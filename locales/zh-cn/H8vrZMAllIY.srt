1
00:00:00,300 --> 00:00:02,110
这一单元后续内容的目标是

2
00:00:02,110 --> 00:00:04,910
修改我们的搜索引擎代码

3
00:00:04,910 --> 00:00:09,450
以便实现 PageRank 算法 我们有一个小问题

4
00:00:09,450 --> 00:00:12,340
PageRank 是 Google 的注册商标

5
00:00:12,340 --> 00:00:15,110
所以我们不能将我们的算法称为 PageRank

6
00:00:15,110 --> 00:00:20,340
虽然作用是一样的 我们称之为 URank

7
00:00:20,340 --> 00:00:21,860
要实现这一排名算法

8
00:00:21,860 --> 00:00:24,930
首先我们需要跟踪链接图表

9
00:00:26,190 --> 00:00:31,500
我们的网页热门程度取决于链接结构

10
00:00:31,500 --> 00:00:37,620
意味着我们需要跟踪哪些网页链接到哪些网页

11
00:00:37,620 --> 00:00:40,610
对于每个链接 都表示网页之间的联系

12
00:00:40,610 --> 00:00:43,410
可以看做图表

13
00:00:43,410 --> 00:00:45,020
图表就是一组节点

14
00:00:45,020 --> 00:00:47,900
用圆圈表示 节点之间有边

15
00:00:49,930 --> 00:00:53,150
因为边朝一个方向

16
00:00:53,150 --> 00:00:55,350
就像网页中的链接 我们称之为有向图表

17
00:00:55,350 --> 00:00:59,170
为了表示网页链接结构

18
00:00:59,170 --> 00:01:03,150
我们需要构建一个有向图表

19
00:01:03,150 --> 00:01:05,910
图表中的网页是节点

20
00:01:05,910 --> 00:01:08,850
对于每个网页 我们都需要

21
00:01:08,850 --> 00:01:11,090
跟踪连接节点的边

22
00:01:11,090 --> 00:01:15,030
为此 我们将创建一个字典

23
00:01:16,330 --> 00:01:18,700
在该字典中

24
00:01:18,700 --> 00:01:21,200
条目是节点 即表示网页的 URL

25
00:01:21,200 --> 00:01:25,190
对于每个 URL

26
00:01:25,190 --> 00:01:27,440
我们将创建一个它链接到的所有网页的列表

27
00:01:27,440 --> 00:01:31,430
这是节点 A

28
00:01:31,430 --> 00:01:33,990
这些是节点 B C 和 D

29
00:01:33,990 --> 00:01:37,750
节点 A 中包含 B C D 列表

30
00:01:37,750 --> 00:01:41,380
对于节点 B 没有向外的边

31
00:01:41,380 --> 00:01:47,690
所以是个空列表 写完这个示例

32
00:01:47,690 --> 00:01:52,560
C 有一个指向一个节点的向外链接 D 没有向外链接

33
00:01:52,560 --> 00:01:54,480
这就是我们的目标

34
00:01:54,480 --> 00:01:57,100
我们要构建一个像这样的结构

35
00:01:57,100 --> 00:01:59,840
表示我们抓取的网页结构 得出这一结构是因为

36
00:01:59,840 --> 00:02:03,530
我们沿着抓取工具中的链接浏览

37
00:02:03,530 --> 00:02:06,830
我们的目标是修改在第五单元结束时

38
00:02:06,830 --> 00:02:10,139
定义的抓取网络程序

39
00:02:10,139 --> 00:02:13,940
要修改该程序 而不是仅生成索引

40
00:02:13,940 --> 00:02:17,340
它还会生成一个图表 我们将修改 crawl_web

41
00:02:17,340 --> 00:02:20,730
依然选择 seed 网页作为起始网页

42
00:02:20,730 --> 00:02:23,560
但现在会同时生成索引和图表

43
00:02:23,560 --> 00:02:26,960
该图表是一种结构

44
00:02:26,960 --> 00:02:29,960
表示从每个节点到所链接到的网页的映射

45
00:02:29,960 --> 00:02:31,690
我们看一下第五单元结束时写的代码

46
00:02:31,690 --> 00:02:34,900
看看需要如何更改

47
00:02:34,900 --> 00:02:37,820
这是第五单元结束时的网页抓取代码

48
00:02:37,820 --> 00:02:41,370
提醒下 我们跟踪了 tocrawl 列表中

49
00:02:41,370 --> 00:02:44,370
需要抓取的剩余网页 从 seed 网页开始

50
00:02:44,370 --> 00:02:46,740
我们将索引构建为字典

51
00:02:46,740 --> 00:02:49,910
只要还有网页需要抓取

52
00:02:49,910 --> 00:02:53,740
我们就执行 while 循环来寻找要抓取的网页

53
00:02:53,740 --> 00:02:56,590
弹出需要抓取的网页列表

54
00:02:56,590 --> 00:02:59,060
只要是我们尚未抓取的网页 就从该网页上获取内容

55
00:02:59,060 --> 00:03:01,640
添加到索引中

56
00:03:01,640 --> 00:03:05,400
使用 get_all_links 查找所有的链接 传入该网页上的内容

57
00:03:05,400 --> 00:03:08,660
并与 tocrawl 相结合以更新 tocrawl 列表

58
00:03:08,660 --> 00:03:10,830
然后将此网页附加到已经抓取的网页列表上

59
00:03:10,830 --> 00:03:15,130
要更改这段代码以构建图表

60
00:03:15,130 --> 00:03:18,070
我们将保留大部分的代码

61
00:03:18,070 --> 00:03:21,610
除了生成索引之外 我们还将生成图表

62
00:03:21,610 --> 00:03:24,180
该图表也将是字典

63
00:03:24,180 --> 00:03:26,990
这是因为表示 URL 的节点和从该节点

64
00:03:26,990 --> 00:03:30,300
发出的边列表之间存在映射

65
00:03:30,300 --> 00:03:34,690
我们将图表创建为空字典

66
00:03:34,690 --> 00:03:36,630
当我们发现新的网页时 就会添加到该图表中

67
00:03:36,630 --> 00:03:39,980
我们还将更改返回值

68
00:03:39,980 --> 00:03:43,500
同时返回索引和图表 我还要做个更改

69
00:03:43,500 --> 00:03:46,640
然后再布置测验

70
00:03:46,640 --> 00:03:49,840
我要做的更改是 这里不再调用 get_ all_links

71
00:03:49,840 --> 00:03:53,550
因为图表构建和 tocrawl 列表都取决于

72
00:03:53,550 --> 00:03:56,110
知道所有的链接 我们将创建一个新的变量

73
00:03:56,110 --> 00:03:59,710
然后将 get_all_links(content) 的结果分配给该变量

74
00:03:59,710 --> 00:04:02,970
也就是我们可以将这些链接用作

75
00:04:02,970 --> 00:04:05,990
content 的输入

76
00:04:05,990 --> 00:04:10,110
但是我们也可以使用它们来构建图表

77
00:04:10,110 --> 00:04:11,920
现在将由你来编写构建图表这行代码

78
00:04:11,920 --> 00:04:14,650
测验就是完成这行代码

79
00:04:14,650 --> 00:04:18,209
编写这行代码以更新图表