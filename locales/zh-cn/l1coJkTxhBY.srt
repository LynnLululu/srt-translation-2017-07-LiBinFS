1
00:00:00,000 --> 00:00:02,000
这是非常棘手的问题

2
00:00:02,000 --> 00:00:05,000
它不是一颗金星难度的问题 而是两颗金星难度

3
00:00:05,000 --> 00:00:08,000
它结合了很多你已经学过的知识

4
00:00:08,000 --> 00:00:10,000
也包含一些新的 完全新的东西

5
00:00:10,000 --> 00:00:14,000
这是身为程序员的一部分

6
00:00:14,000 --> 00:00:16,000
将知道与不知道的事物相结合 来解决新问题

7
00:00:16,000 --> 00:00:18,000
这是一个困难的问题

8
00:00:18,000 --> 00:00:20,000
你可能不知道每一步该怎么做

9
00:00:20,000 --> 00:00:23,000
但是我们可以从输出倒回去做

10
00:00:23,000 --> 00:00:25,000
有时候 以这种方式解决困难的问题比较简单

11
00:00:25,000 --> 00:00:28,000
将问题拆解开来 甚至从结果开始

12
00:00:28,000 --> 00:00:30,000
我们知道结果应该是什么

13
00:00:30,000 --> 00:00:33,000
如前所述 3.14 ...

14
00:00:33,000 --> 00:00:35,000
要输出 3

15
00:00:35,000 --> 00:00:38,000
27.63 的结果应该是输出 28

16
00:00:38,000 --> 00:00:42,000
为了得到这个结果 我们输出小数点前的部分

17
00:00:42,000 --> 00:00:45,000
我们从一个字符串中输出

18
00:00:45,000 --> 00:00:48,000
我们找到小数点的位置

19
00:00:48,000 --> 00:00:52,000
将它之前的部分 称为 s

20
00:00:52,000 --> 00:00:57,000
假设这个位置由整数 point 来表示

21
00:00:57,000 --> 00:01:01,000
所以 s 是

22
00:01:01,000 --> 00:01:03,000
'3.~' 之类的东西

23
00:01:03,000 --> 00:01:06,000
目前我们不知道它具体是什么

24
00:01:06,000 --> 00:01:10,000
在第二个示例中 27 是初始的 point

25
00:01:10,000 --> 00:01:13,000
s 是 '28.~' 

26
00:01:13,000 --> 00:01:15,000
请记住 这些必须是字符串类型

27
00:01:15,000 --> 00:01:17,000
这是 s 本来的类型

28
00:01:17,000 --> 00:01:19,000
现在我们需要 point

29
00:01:19,000 --> 00:01:23,000
point 代表每个字符串里小数点的位置

30
00:01:23,000 --> 00:01:26,000
我们可以在字符串中看到

31
00:01:26,000 --> 00:01:28,000
有了 s  我们知道如何找到 point

32
00:01:28,000 --> 00:01:31,000
使用 find 指令

33
00:01:31,000 --> 00:01:34,000
为了得到 s 我们可能有某种形式的数字

34
00:01:34,000 --> 00:01:37,000
我们使用 str 把它转换成字符串

35
00:01:37,000 --> 00:01:40,000
现在的问题是 num 等于什么？

36
00:01:40,000 --> 00:01:43,000
为了了解我们想要的 num 是什么 我们必须看 s

37
00:01:43,000 --> 00:01:47,000
因为 s 是 num 的字符串形式

38
00:01:47,000 --> 00:01:51,000
这里 s 是字符串 '3.' 与其他数字

39
00:01:51,000 --> 00:01:55,000
num 也是同样的东西 但它是一个数字而不是字符串

40
00:01:55,000 --> 00:01:58,000
在第二个例子中 我们有同样的情況

41
00:01:58,000 --> 00:02:03,000
除了 num 将是 28 和一些小数

42
00:02:03,000 --> 00:02:10,000
问题是 我们如何把我们的初始值 x 转成 num 呢？

43
00:02:10,000 --> 00:02:14,000
我们希望这种方法对任何数 x 都有效

44
00:02:14,000 --> 00:02:16,000
不只是这里列出的两组数字

45
00:02:16,000 --> 00:02:20,000
因此 如果十分位等于或大于 0.5

46
00:02:20,000 --> 00:02:24,000
我们要增加数字 x 到下一个最接近的整数

47
00:02:24,000 --> 00:02:28,000
一个方法是简单地加上 0.5 大功告成

