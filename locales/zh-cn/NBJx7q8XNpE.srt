1
00:00:00,440 --> 00:00:02,660
所以 答案是我们需要更改其中三个函数

2
00:00:05,490 --> 00:00:06,610
我们需要更改 crawl_web 我们更改 add_to_index

3
00:00:06,610 --> 00:00:10,210
并且 我们还需要更改 lookup 我们不需要更改 get_all_links

4
00:00:10,210 --> 00:00:12,490
我们可以保持这个函数不变

5
00:00:12,490 --> 00:00:15,460
这个函数仅仅返回一个链接列表 它不依赖于 index 变量

6
00:00:15,460 --> 00:00:18,590
我们不需要更改 add_page_to_index

7
00:00:18,590 --> 00:00:23,220
这有一点奇怪 因为它是依赖于 index的 但是

8
00:00:23,220 --> 00:00:27,040
鉴于 add_page_to_index的实现方式 它调用 add_to_index

9
00:00:27,040 --> 00:00:30,490
所以 它不依赖于我们怎样表示 index

10
00:00:30,490 --> 00:00:32,860
它遍历所有的关键字并且把这些关键字添加到index 通过调用 add_to_index

11
00:00:32,860 --> 00:00:35,780
我们实际上不需要改变这些代码

12
00:00:35,780 --> 00:00:39,060
另两个函数确实需要更改 所以让我们从crawl_web开始

13
00:00:39,060 --> 00:00:41,770
我们需要理解需要做些什么

14
00:00:41,770 --> 00:00:44,498
来使用字典 我们需要做的改动实际上很小

15
00:00:44,498 --> 00:00:48,570
对吗？ index 在这儿

16
00:00:48,570 --> 00:00:52,310
在老版本中 我们将 index 初始化为一个空列表

17
00:00:52,310 --> 00:00:55,640
我们仅仅需要将 index 传递给 add_page_to_index

18
00:00:55,640 --> 00:00:58,540
所以 为了改为使用字典

19
00:00:58,540 --> 00:01:02,020
我们需要做的是将方括号改为花括号

20
00:01:02,020 --> 00:01:04,620
所以 现在 我们初始化声明一个空字典

21
00:01:04,620 --> 00:01:08,170
而不是一个空链表

22
00:01:08,170 --> 00:01:11,430
这就是所有对 crawl_web 的必要更改 对 add_index 来说

23
00:01:11,430 --> 00:01:13,790
需要的更改有一些复杂 通过查看 crawl_web 的代码

24
00:01:13,790 --> 00:01:16,920
其中 对于每个页面 我们调用 add_to_index

25
00:01:16,920 --> 00:01:20,590
并且传入 index 参数 不过 index 已经变成了字典类型

26
00:01:20,590 --> 00:01:23,400
现在查看 add_page_to_index 我想说我们不需要修改它

27
00:01:23,400 --> 00:01:28,620
这些是 add_page_to_index 的代码 它使用 index 作为参数

28
00:01:28,620 --> 00:01:31,500
它遍历 words 它将每一个 word 加入到 index 中

29
00:01:32,730 --> 00:01:34,960
不论使用列表还是字典我们都可以完成相同的功能

30
00:01:34,960 --> 00:01:37,000
我们不需要改变添加 page 到 index的代码

31
00:01:37,000 --> 00:01:40,270
我们要修改 add_to_index

32
00:01:40,270 --> 00:01:42,350
我们需要修改 add_to_index 的代码

33
00:01:42,350 --> 00:01:45,590
index and lets try to figure out how. So before we had
首先要试着弄明白怎么做

34
00:01:45,590 --> 00:01:48,460
在调用 add_to_index 之前 它需要 index keyword 和 URL

35
00:01:48,460 --> 00:01:51,470
我们依然使用相同的参数 不过在使用列表的时候

36
00:01:51,470 --> 00:01:54,810
我们必须做的是遍历 index 中所有的条目

37
00:01:54,810 --> 00:01:58,120
检查哪一个和我们查找的相匹配

38
00:01:58,120 --> 00:02:01,380
如果找到了 我们添加这个 URL

39
00:02:01,380 --> 00:02:04,430
如果 我们直到结束也没有找到 之后 我们添加一个新的条目

40
00:02:04,430 --> 00:02:08,100
这个条目的关键字仅包括一个 URL

41
00:02:08,100 --> 00:02:11,870
所以 让我们弄明白如何使这个改动正常工作

42
00:02:11,870 --> 00:02:14,130
使用哈希表的好处是

43
00:02:14,130 --> 00:02:17,280
我们不需要遍历 我们知道关键字在哈希表中的位置

44
00:02:17,280 --> 00:02:21,430
使用字典的话 内置函数已经提供了相应的功能

45
00:02:21,430 --> 00:02:24,350
我们可以不使用遍历

46
00:02:24,350 --> 00:02:27,440
而是直接检查关键字是否在 index 中

47
00:02:27,440 --> 00:02:30,810
如果我们在 index 中找到关键字 会发生什么

48
00:02:30,810 --> 00:02:34,540
这意味着我们可以查找它 这会在字典中查找

49
00:02:34,540 --> 00:02:37,010
对应的 index 的条目 也就是我们已有 URL 的列表

50
00:02:37,010 --> 00:02:43,670
我们现在需要做的是添加新的 URL

51
00:02:43,670 --> 00:02:47,840
如果 它不在 index 中

52
00:02:47,840 --> 00:02:50,590
我们需要做一些不同的事 我们之前做的是

53
00:02:50,590 --> 00:02:54,870
使用 append 添加新的元素到 index 中

54
00:02:54,870 --> 00:02:57,200
我们不想现在这样做

55
00:02:57,200 --> 00:02:58,760
我们想添加一个与字典匹配的新键值

56
00:02:58,760 --> 00:03:02,560
我们使用赋值来完成它

57
00:03:02,560 --> 00:03:05,300
我们要添加的条目是只包含这个 URL 的列表

58
00:03:05,300 --> 00:03:08,110
你可以把所有东西都删掉

59
00:03:10,180 --> 00:03:12,880
添加新的条目到 keyword 中

60
00:03:12,880 --> 00:03:16,220
这更简洁了 我们用了更少的代码 并且这会运行地很快

61
00:03:16,220 --> 00:03:19,610
我们不需要遍历

62
00:03:19,610 --> 00:03:22,240
因为哈希表 我们能立刻查找是否关键字在 index 中

63
00:03:22,240 --> 00:03:25,530
我们能够知道关键字是否存在 关键字对应的值

64
00:03:25,530 --> 00:03:28,290
通过使用字典版的 lookup 我们能够添加新的 URL

65
00:03:28,290 --> 00:03:31,490
到相应的列表中

66
00:03:31,490 --> 00:03:36,320
如果不存在相应的关键字 我们能够创建新的条目 使用字典的语句

67
00:03:36,320 --> 00:03:39,910
就像这个 这个仅包括 URL

68
00:03:39,910 --> 00:03:42,070
所以 现在我们有了一个更简洁的 add_to_index

69
00:03:42,070 --> 00:03:45,620
我希望你能够理解

70
00:03:45,620 --> 00:03:47,910
如果你理解了 你现在能够自己定义 lookup 了
