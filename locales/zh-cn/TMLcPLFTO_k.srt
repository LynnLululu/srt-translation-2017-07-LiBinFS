1
00:00:00,170 --> 00:00:01,970
来回顾一下第二单元末的代码

2
00:00:01,970 --> 00:00:06,590
我们定义了一个函数 get_next_target

3
00:00:06,590 --> 00:00:10,050
它会读取一个页面 搜索页面上第一条链接目标

4
00:00:10,050 --> 00:00:13,310
之后返回链接其 URL 的值

5
00:00:13,310 --> 00:00:16,470
这将作为第一个输出 此外还会返回

6
00:00:16,470 --> 00:00:18,600
引用链接末尾的位置

7
00:00:18,600 --> 00:00:21,580
这样才能知道从哪继续 之后又定义了一个函数

8
00:00:21,580 --> 00:00:24,680
print_all_links 会一直运行直到循环结束

9
00:00:25,900 --> 00:00:28,560
只要页面还有 URL

10
00:00:28,560 --> 00:00:32,640
它就会找到下一个目标 将其存入 url 变量

11
00:00:32,640 --> 00:00:35,580
同时通过 endpos 来追踪字符串末尾的位置

12
00:00:35,580 --> 00:00:38,620
如果有一条 URL 那要做的仅仅就是把它打印出来

13
00:00:38,620 --> 00:00:40,990
之后更新页面来继续查找

14
00:00:40,990 --> 00:00:45,100
我们对这里要进行改进的是 让它不只是打印出

15
00:00:45,100 --> 00:00:48,350
每个找到的 URL 我们要收集这些 URL

16
00:00:48,350 --> 00:00:51,090
找到一个利用这些 URL 的方法 这样才能用它们

17
00:00:51,090 --> 00:00:53,110
来继续爬取新的页面

18
00:00:53,110 --> 00:00:57,040
在这一单元要学的数据结构就是这个方法

19
00:00:57,040 --> 00:01:00,270
我们要做的是把这些 URL 保存在一个列表

20
00:01:00,270 --> 00:01:04,780
在这个函数的末尾 我们想要的不是把链接打印出来

21
00:01:04,780 --> 00:01:07,700
像之前那样 而是拥有一个存有所有找到链接的列表

22
00:01:10,090 --> 00:01:13,690
现在 print_all_links 做的是

23
00:01:13,690 --> 00:01:16,900
把页面作为它的输入 然后什么都不输出

24
00:01:16,900 --> 00:01:19,950
它什么都不返回 它所做的只是

25
00:01:19,950 --> 00:01:23,720
把所有链接都打印出来

26
00:01:23,720 --> 00:01:25,560
但这样之后并不能使用它们

27
00:01:25,560 --> 00:01:27,990
因为它什么都不返回 所以要做的是修改这里

28
00:01:27,990 --> 00:01:31,228
我们要的不是 print_all_links (打印所有链接)

29
00:01:31,228 --> 00:01:35,280
而是 get_all_links (获得所有链接) 我们真正想要的是获得它们

30
00:01:35,280 --> 00:01:37,890
这样才能使用它们 所以我们想要的是

31
00:01:37,890 --> 00:01:39,720
真正获得这些链接而不是打印所有链接

32
00:01:39,720 --> 00:01:41,390
因此要把函数名字改成 get_all_links

33
00:01:41,390 --> 00:01:44,400
同时要输出一个链接的列表

34
00:01:44,400 --> 00:01:48,190
而不是什么都不输出

35
00:01:48,190 --> 00:01:50,340
这个列表和之前打印出的东西是对应的

36
00:01:50,340 --> 00:01:52,640
但只是现在不打印出它们了

37
00:01:52,640 --> 00:01:55,070
而是把它们输出成一个列表
