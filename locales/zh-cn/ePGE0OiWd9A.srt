1
00:00:00,210 --> 00:00:03,410
答案是所有的代码片段

2
00:00:03,410 --> 00:00:06,110
除了第三个 除了这一个

3
00:00:06,110 --> 00:00:09,820
最终保持 p 值不变 让我们解答

4
00:00:09,820 --> 00:00:12,480
这是为什么 我们不会假设 p 是什么

5
00:00:12,480 --> 00:00:15,600
它是一个至少有2个元素的列表 所以我将画出 p

6
00:00:15,600 --> 00:00:18,520
我们不能做出什么假设 关于它的元素是什么

7
00:00:18,520 --> 00:00:22,480
我们称他们为 α β 和 γ

8
00:00:22,480 --> 00:00:25,110
事实上 它看起来像 α β 和 α 没关系

9
00:00:25,110 --> 00:00:26,790
然后 让我们看一下第一个选项 接下来

10
00:00:26,790 --> 00:00:30,630
发生的是 我们给 p 追加了元素 3 这样就是在

11
00:00:30,630 --> 00:00:33,330
p 的末尾加了一个新元素 然后我们

12
00:00:33,330 --> 00:00:38,050
使用 pop 这样就删除了它 我们不会对 pop 返回

13
00:00:38,050 --> 00:00:40,530
的结果做任何事 不过没关系

14
00:00:40,530 --> 00:00:43,640
p 的值不变 对于这个选项 我们通过 pop 操作开始

15
00:00:43,640 --> 00:00:47,070
这将从 p 中删除一个元素 然后现在 x

16
00:00:47,070 --> 00:00:50,210
指向了这个元素 所以 x 指向了

17
00:00:50,210 --> 00:00:53,960
α 在这种情况下 而且 p 被改变了

18
00:00:53,960 --> 00:00:56,870
由于删除了该元素 所以在这个阶段 p 值

19
00:00:56,870 --> 00:00:59,720
发生了变化 但我们还没做完 我们还有

20
00:00:59,720 --> 00:01:03,140
要追加 (append) 的东西 这次 append 操作针对 p

21
00:01:03,140 --> 00:01:06,260
使 x 的值追加到 p 的末端

22
00:01:06,260 --> 00:01:09,810
x 的值就是 α 也就是它一开始

23
00:01:09,810 --> 00:01:12,140
在的那个位置 因此 在完成

24
00:01:12,140 --> 00:01:15,390
这两个步骤之后 p 的值也保持不变

25
00:01:16,640 --> 00:01:22,200
让我们来看看第三个选项 看看为什么会影响 p 的值

26
00:01:22,200 --> 00:01:25,080
第一个语句中 我们赋给 x

27
00:01:25,080 --> 00:01:28,300
p.pop() 的结果 这将删除

28
00:01:28,300 --> 00:01:33,810
变量 p 的最后一个元素 并将它赋值给 x 所以现在无论

29
00:01:33,810 --> 00:01:41,210
p 最后元素的值是什么 x 现在指向了它 然后 我们做另一个 pop 现在 这次 pop 后

30
00:01:42,550 --> 00:01:49,810
y 将指向这里的值 也就是 β 我们从 p 中删除这个值 所以

31
00:01:49,810 --> 00:01:52,920
在这个语句 p 已经失去了两个元素 但

32
00:01:52,920 --> 00:01:55,240
我们已经在变量 x 和 y 中存储了它们

33
00:01:56,570 --> 00:02:01,390
然后我们做 append 操作 而我们以做 pop 相同的顺序来做 append

34
00:02:01,390 --> 00:02:04,350
因此 我们首先追加的 x 的值

35
00:02:04,350 --> 00:02:07,790
x 是 α 所以这将 α 加入到 p

36
00:02:07,790 --> 00:02:10,250
请注意 这不是我们开始时的样子

37
00:02:10,250 --> 00:02:13,490
我们开始时 那里是 β 然后 我们做下一个

38
00:02:13,490 --> 00:02:16,910
append 这将 y 的值追加 也就是将

39
00:02:16,910 --> 00:02:21,150
β 加入到 p 如果我们对 p 的元素做 pop 操作 而且

40
00:02:21,150 --> 00:02:23,210
以相同的顺序再添加它们

41
00:02:23,210 --> 00:02:25,900
这实际上将扭转元素的顺序 因为每次

42
00:02:25,900 --> 00:02:27,560
我们 append 我们都加在了列表的最后

43
00:02:27,560 --> 00:02:33,730
对于最后的选项 我们再次 pop 两个元素

44
00:02:33,730 --> 00:02:36,560
这次我们以相反的顺序追加

45
00:02:36,560 --> 00:02:38,810
这意味着当我们对他们做 append 操作时

46
00:02:38,810 --> 00:02:42,320
当我们将 pop 的值赋给 x 即得到了 α 值

47
00:02:42,320 --> 00:02:45,630
当我们将 pop 的值赋给 y y 的值就是 β

48
00:02:45,630 --> 00:02:48,260
p 失去了两个元素 作为两次

49
00:02:48,260 --> 00:02:51,890
pop 操作的结果 现在 我们在这里 我们做

50
00:02:51,890 --> 00:02:55,150
append 操作 而这次 我们首先追加 y

51
00:02:55,150 --> 00:02:59,240
也就是 β 这是我们最后一次 pop 操作弹出的

52
00:02:59,240 --> 00:03:01,480
我们第一个追加它 这得到了

53
00:03:01,480 --> 00:03:05,205
它们之前的顺序 最后

54
00:03:05,205 --> 00:03:10,470
我们追加 x 它是 α 这将恢复

55
00:03:10,470 --> 00:03:12,540
p 在我们开始时候的值

