1
00:00:00,270 --> 00:00:03,120
那么我们要实现哈希表索引的第一件事

2
00:00:03,120 --> 00:00:05,550
是知道如何创建一个空哈希表

3
00:00:05,550 --> 00:00:10,200
对于简单的索引结构 这比较容易

4
00:00:10,200 --> 00:00:13,410
我们只需要用一个没有元素的空列表用来创建空索引

5
00:00:13,410 --> 00:00:17,630
我们可以通过初始化一个空列表来初始化索引

6
00:00:17,630 --> 00:00:20,220
然后当元素加入列表中时

7
00:00:20,220 --> 00:00:23,460
相当于将它们加入到空表中

8
00:00:23,460 --> 00:00:25,820
哈希表可不是这么玩的

9
00:00:25,820 --> 00:00:29,010
我们需要用些更复杂的手段来建立空哈希表

10
00:00:29,010 --> 00:00:32,220
这是因为我们需要从所有的存储桶开始

11
00:00:32,220 --> 00:00:35,660
对于普通的索引 初始值只是个空列表 

12
00:00:35,660 --> 00:00:38,800
而对于哈希表 初始值需要设置空桶

13
00:00:38,800 --> 00:00:43,590
这个原因是

14
00:00:43,590 --> 00:00:45,580
我们希望能直接做查找 而且我们希望能

15
00:00:45,580 --> 00:00:47,880
将元素添加到哈希表中 如果我们

16
00:00:47,880 --> 00:00:50,830
从空列表开始 那么 第一次查找关键词时

17
00:00:50,830 --> 00:00:54,160
会显示关键词在27号桶中

18
00:00:54,160 --> 00:00:56,530
我们没有27号桶 所以还需要

19
00:00:56,530 --> 00:00:58,650
创建这个桶  更明智的办法是

20
00:00:58,650 --> 00:01:03,480
将空哈希表建立成存储桶的列表

21
00:01:03,480 --> 00:01:06,430
也就是在开始时 所有的桶都是空的 它们准备好迎接关键词的放入

22
00:01:06,430 --> 00:01:08,780
这时我们需要创建空哈希表的代码了

23
00:01:08,780 --> 00:01:12,230
我想你们已经知道

24
00:01:12,230 --> 00:01:16,000
如何定义make_hashtable函数了 接下来有个小测试

25
00:01:16,000 --> 00:01:19,510
你们的目标是定义一个函数 我们称之为make_hashtable

26
00:01:19,510 --> 00:01:21,970
输入是一个数字 给出哈希表中存储桶的数量

27
00:01:21,970 --> 00:01:24,240
输出一个空的哈希表

28
00:01:24,240 --> 00:01:27,400
这个哈希表中的空桶数是输入的数字

