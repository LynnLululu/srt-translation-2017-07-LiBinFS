1
00:00:00,350 --> 00:00:06,480
所以这里有两个正确答案 第三个和

2
00:00:06,480 --> 00:00:11,140
第五个 这就是为什么哈希表比

3
00:00:11,140 --> 00:00:15,790
线性索引更好的原因 我们可以加倍关键词数目

4
00:00:15,790 --> 00:00:17,600
加倍桶的数目 但是查询时间

5
00:00:17,600 --> 00:00:20,200
保持不变 而对于线性索引 如果我们

6
00:00:20,200 --> 00:00:22,725
加倍关键词数目 那么对每次查询

7
00:00:22,725 --> 00:00:25,280
我们都需要遍历每一个关键词

8
00:00:25,280 --> 00:00:27,760
如果关键词在最后 或者根本不在

9
00:00:27,760 --> 00:00:30,100
表里面 则查询的时间会

10
00:00:30,100 --> 00:00:32,916
随着我们加倍关键词的数目而加倍 使用

11
00:00:32,916 --> 00:00:35,740
哈希表的时候 如果我们同时加倍桶的数目 在我们

12
00:00:35,740 --> 00:00:39,400
加倍关键词数目时 那么每个桶里的关键词

13
00:00:39,400 --> 00:00:43,720
数目保持不变 我们正在将关键词均匀分配到桶中

14
00:00:43,720 --> 00:00:47,039
因此 这就是那个数字 每个桶的关键词数量

15
00:00:47,039 --> 00:00:50,540
是关键词的数量除以桶的数量

16
00:00:50,540 --> 00:00:54,330
如果我们对它们都加倍 这个数字几乎保持不变

17
00:00:54,330 --> 00:00:57,780
查询时间只取决于每个桶的关键词数量

18
00:00:57,780 --> 00:01:01,450
找到桶的时间非常快 对吧？

19
00:01:01,450 --> 00:01:04,420
我们只需要运行哈希函数 找到列表的元素

20
00:01:04,420 --> 00:01:07,730
这两个查询需要多久时间

21
00:01:07,730 --> 00:01:10,210
都和列表的尺寸没多大关系 然后我们要

22
00:01:10,210 --> 00:01:13,930
遍历找到的桶 根据桶的尺寸 我们必须

23
00:01:13,930 --> 00:01:16,210
一次遍历该桶的每个元素

24
00:01:16,210 --> 00:01:18,280
因此 如果我们保持每个桶的关键词数量相同

25
00:01:18,280 --> 00:01:21,640
则查找时间保持基本相同 所以这是

26
00:01:21,640 --> 00:01:24,610
哈希表所拥有的很强大的一个特性 如果我们加倍了

27
00:01:24,610 --> 00:01:28,360
桶的数目 在我们加倍关键词数目的同时 那么预期的

28
00:01:28,360 --> 00:01:32,860
查询时间并不会改变 对于其他的可能性

29
00:01:32,860 --> 00:01:35,040
如果我们加倍了关键词数目 保持桶数目不变

30
00:01:35,040 --> 00:01:38,490
这会使得查询变慢 因为每个桶的关键词数目

31
00:01:38,490 --> 00:01:41,340
变成了大约是原来的两倍 所以每次查找需要

32
00:01:41,340 --> 00:01:43,900
两倍的时间 如果我们保持同样的

33
00:01:43,900 --> 00:01:47,220
关键词数量 但是加倍桶的数目 那么

34
00:01:47,220 --> 00:01:50,430
查询时间会更快 我们有相同的关键词数目 加倍了

35
00:01:50,430 --> 00:01:53,270
桶数目 所以 这个值大约是之前的一半

36
00:01:53,270 --> 00:01:56,416
预期的查找时间将大约是

37
00:01:56,416 --> 00:01:59,750
我们将桶数目加倍之前的一半

38
00:01:59,750 --> 00:02:02,760
我们减半关键词数目 保持桶数目不变

39
00:02:02,760 --> 00:02:06,640
这本质上与之前有着相同的影响 每个桶的平均关键词数目

40
00:02:06,640 --> 00:02:08,020
将会是之前的一半

41
00:02:08,020 --> 00:02:10,800
预期的查询时间

42
00:02:10,800 --> 00:02:12,910
也会减半 最后呢

43
00:02:12,910 --> 00:02:15,100
如果我们都减半的话

44
00:02:15,100 --> 00:02:17,200
这将会保持比值相同

45
00:02:17,200 --> 00:02:19,150
预期查询时间也会相同 所以这就是

46
00:02:19,150 --> 00:02:21,910
为什么这两个是正确的答案 它们的

47
00:02:21,910 --> 00:02:25,070
查询时间与预期查询时间基本上保持不变
