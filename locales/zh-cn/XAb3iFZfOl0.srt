1
00:00:00,000 --> 00:00:08,882
对于这个问题 你要对关键词记录特定 url 的点击数

2
00:00:08,882 --> 00:00:14,991
当 url 因为这个关键词被选择时 使用者点击了它

3
00:00:14,992 --> 00:00:18,525
所以现在 我们衡量了 url 的受欢迎度

4
00:00:18,524 --> 00:00:22,251
因此搜索的结果可以根据受欢迎度作排列

5
00:00:22,251 --> 00:00:27,366
为此 必须改变我们的索引结构

6
00:00:27,367 --> 00:00:30,983
所以 我们有了与每个 url 相关的计数 (count)

7
00:00:30,983 --> 00:00:38,993
为了做到这一点 我们要以列表 [url, count] 来替代 url

8
00:00:38,993 --> 00:00:45,623
这意味着 我们必须使用列表 [url, 0] 来替换 url

9
00:00:45,622 --> 00:00:49,486
因为 count 的初始值为 0

10
00:00:49,487 --> 00:00:51,506
这改变了结构

11
00:00:51,506 --> 00:00:58,274
我们还没做的是 考虑重复的元素

12
00:00:58,274 --> 00:01:04,686
我们要做的事与先前的问题类似：你必须移除索引中重复的元素

13
00:01:04,686 --> 00:01:11,828
但这一次略有不同 因为结构为 [url, count]

14
00:01:11,828 --> 00:01:16,664
和以前一样 我们要检查关键词

15
00:01:16,665 --> 00:01:18,094
当我们有了关键词

16
00:01:18,093 --> 00:01:21,080
我们要遍历这里的列表

17
00:01:21,081 --> 00:01:27,433
我们要检查是否列表中的每个元素

18
00:01:27,433 --> 00:01:31,118
是否第一个位置是我们的 url

19
00:01:31,118 --> 00:01:34,971
如果是 我们完成了 我们不想把它再次加到索引里

20
00:01:34,971 --> 00:01:39,119
如果在我们遍历所有的 url 之后 它不在索引中

21
00:01:39,120 --> 00:01:43,319
我们会和以前一样 把它加到索引里

22
00:01:43,319 --> 00:01:45,795
这处理了重复的项目

23
00:01:45,795 --> 00:01:48,896
以及索引结构的改变

24
00:01:48,896 --> 00:01:52,751
我们现在需要做的是 对点击进行排序

25
00:01:52,751 --> 00:01:57,867
为此 我们要查询索引 寻找我们的关键词

26
00:01:57,867 --> 00:02:01,308
这会给我们所有相关的 url

27
00:02:01,308 --> 00:02:03,149
如果我们得到某些 url

28
00:02:03,150 --> 00:02:05,259
嗯 如果我们没有得到任何 url  那么什么也不必做

29
00:02:05,259 --> 00:02:07,138
我们不能点击任何东西

30
00:02:07,138 --> 00:02:14,942
如果我们得到某些 url  如果第一个位置是我们要寻找的 url

31
00:02:14,942 --> 00:02:21,617
记得 lookup 现在传回的是整个列表 [url, count]

32
00:02:21,617 --> 00:02:26,693
所以我们必须看第一个项目 url

33
00:02:26,693 --> 00:02:29,024
看它是否符合整个列表

34
00:02:29,025 --> 00:02:30,687
所以如果它符合

35
00:02:30,687 --> 00:02:35,981
那么我们要增加计数 它是第二个位置加 1

36
00:02:35,980 --> 00:02:39,000
就这样了

