1
00:00:00,350 --> 00:00:03,570
所以答案是 其中有许多特性都是

2
00:00:03,570 --> 00:00:08,710
可取的 第二个特性是可取的 所以 第一个

3
00:00:08,710 --> 00:00:10,940
是不可取的 因为如果哈希函数为每个

4
00:00:10,940 --> 00:00:14,040
关键字都输出一个唯一的数字 那么

5
00:00:14,040 --> 00:00:16,780
哈希函数的范围就特别大了 我们需要

6
00:00:16,780 --> 00:00:20,270
大量的内存来存储哈希表

7
00:00:20,270 --> 00:00:22,360
桶的数量将和关键字的

8
00:00:22,360 --> 00:00:25,860
数量相同 这样不太行得通

9
00:00:25,860 --> 00:00:29,210
我们想要的桶的数量是 b 所以

10
00:00:29,210 --> 00:00:31,590
这意味着 哈希函数的输出应在

11
00:00:31,590 --> 00:00:34,550
0 到 b-1 之间的范围内 这样我们将找到

12
00:00:34,550 --> 00:00:37,890
对应于该桶列表的元素 所以 我们确实需要

13
00:00:37,890 --> 00:00:41,660
第二个特性 第三个和第四个特性说的是 我们

14
00:00:41,660 --> 00:00:44,790
想要每个桶中的关键字数量大致相同

15
00:00:44,790 --> 00:00:47,720
所以 如果有 k 个关键字 而我们正要将他们放入

16
00:00:47,720 --> 00:00:52,030
b 个桶中 如果我们希望桶的大小大致相同

17
00:00:52,030 --> 00:00:55,960
那么每个桶就应该有 ķ/b 个关键字

18
00:00:55,960 --> 00:00:59,590
所以 第三个和第四个特性都是正确的

19
00:00:59,590 --> 00:01:02,250
最后一个特性说 桶 0 应该有

20
00:01:02,250 --> 00:01:06,690
比桶 1 更多的关键字 我们没有理由这样想

21
00:01:06,690 --> 00:01:08,650
那么 你可能会认为一开始

22
00:01:08,650 --> 00:01:12,790
比以后有更多的关键字比较好 但是对于

23
00:01:12,790 --> 00:01:15,040
哈希表 不是这样的情况 请记住 哈希函数

24
00:01:15,040 --> 00:01:17,640
做的是什么 它告知我们应该遍历哪个桶

25
00:01:17,640 --> 00:01:19,850
我们不用先遍历前面的桶

26
00:01:19,850 --> 00:01:22,440
这与我们一开始的列表索引不同

27
00:01:22,440 --> 00:01:24,930
之前第一个是可以最快查到的一个

28
00:01:24,930 --> 00:01:27,580
而且最后一个要遍历完所有的元素

29
00:01:27,580 --> 00:01:29,870
对于哈希表 情况并非如此 没有

30
00:01:29,870 --> 00:01:32,210
理由想要桶 0 比桶 1 拥有更多的条目

31
00:01:32,210 --> 00:01:34,540
我们真正需要的是尽力

32
00:01:34,540 --> 00:01:38,140
使得所有的桶具有大致相同数量的关键字
