1
00:00:00,240 --> 00:00:03,166
这里是我们可以定义 hashtable_add 的一种方式 我们将定义

2
00:00:03,166 --> 00:00:06,720
过程 hashtable_add 所以 我们要做的第一件事就是

3
00:00:06,720 --> 00:00:10,310
找到正确的桶 我们将使用我们刚刚定义的 hashtable_get_bucket

4
00:00:10,310 --> 00:00:13,790
传入 表和键 我们将其存储在

5
00:00:13,790 --> 00:00:16,430
变量 bucket 中 我们需要做的下一件事

6
00:00:16,430 --> 00:00:19,350
是添加新的键值对 (key value pair) 我们可以使用

7
00:00:19,350 --> 00:00:23,000
append 操作做到这一点 追加一个新元素到列表中

8
00:00:23,000 --> 00:00:25,560
我们想要的这个列表 是一个新的列表

9
00:00:25,560 --> 00:00:29,460
有两个元素 键和值 因此 让我们在

10
00:00:29,460 --> 00:00:32,930
Python 解释器中试试 我之前基本上已经做过同样的事情

11
00:00:32,930 --> 00:00:35,780
除了我们不需要变量 bucket 我们

12
00:00:35,780 --> 00:00:38,490
可以马上做追加操作了 那么 我获取该桶

13
00:00:38,490 --> 00:00:41,360
然后将新条目追加到它 因此 我们将开始制作

14
00:00:41,360 --> 00:00:44,540
一个哈希表 我们会使该哈希表的大小保持在非常小

15
00:00:44,540 --> 00:00:47,520
我们永远不会真的想要一个只有三个桶的哈希表

16
00:00:47,520 --> 00:00:50,650
但是为了方便查看结果 我们将使

17
00:00:50,650 --> 00:00:54,414
哈希表非常小 让我们向表中添加一个键

18
00:00:54,414 --> 00:00:59,080
和值 而对于我们实际的网络索引 值将是一个

19
00:00:59,080 --> 00:01:03,190
URL 列表 对于我们的测试 它们可以是任何东西 所以让我们只

20
00:01:03,190 --> 00:01:08,160
使用一个数字 现在我们可以看看 table 我们来运行一下

21
00:01:10,280 --> 00:01:11,750
然后我们看到我们有了这个表 我们有

22
00:01:11,750 --> 00:01:16,120
三个桶 其中一个桶包含一个元素

23
00:01:16,120 --> 00:01:18,650
如果我们查找这个桶——我们在

24
00:01:18,650 --> 00:01:22,690
hashtable_get_bucket 中查找对应关键词 udacity 的桶 我们应该得到

25
00:01:22,690 --> 00:01:26,830
包含单词 udacity 的桶 让我们试试

26
00:01:28,108 --> 00:01:30,660
这样有用 我们可以添加一些更多的单词到

27
00:01:30,660 --> 00:01:32,720
我们的哈希表 更多的键值对 到我们的

28
00:01:32,720 --> 00:01:35,460
哈希表 现在 我们已经有三个条目

29
00:01:35,460 --> 00:01:40,650
在我们的哈希表中 它们都发生在不同的桶中 这只是比较

30
00:01:40,650 --> 00:01:45,730
幸运 在这种情况下 让我们再添加一个 这样我们就有一个包含了更多

31
00:01:45,730 --> 00:01:51,400
条目的桶 我们应该在增加了更多的一个后打印我们的 table

32
00:01:55,740 --> 00:02:00,800
现在我们有一个一个词的桶 一个两个条目的桶 还有一个

33
00:02:00,800 --> 00:02:02,630
只有一个条目的桶 现在

34
00:02:02,630 --> 00:02:05,259
对于我们做 hashtable_add 的方式 有一个大问题

35
00:02:07,970 --> 00:02:11,470
假设我们再次添加相同的单词 而且 假设

36
00:02:11,470 --> 00:02:14,690
现在 udacity 的值为 27 那么现在我们

37
00:02:14,690 --> 00:02:18,150
正在制作一个拥有三个桶的哈希表 我们正在添加

38
00:02:18,150 --> 00:02:21,900
一堆条目给它 我们添加了条目 udacity

39
00:02:21,900 --> 00:02:25,940
两次 现在当我们获取 udacity 所在的桶

40
00:02:25,940 --> 00:02:27,350
我们看到的是 我们有一个桶

41
00:02:27,350 --> 00:02:30,280
两次拥有同样的关键词 如果我们希望我们的哈希表

42
00:02:30,280 --> 00:02:33,080
是键和值之间的映射 这将是

43
00:02:33,080 --> 00:02:36,150
一个问题 如果我们有同一个关键字两次 当我们

44
00:02:36,150 --> 00:02:38,880
查找 udacity 那么我们不知道我们应该获取的是哪个答案

45
00:02:38,880 --> 00:02:43,410
是值 23 或值 27？所以 我们

46
00:02:43,410 --> 00:02:46,580
想要的与添加有一点不同 我们要的是

47
00:02:46,580 --> 00:02:49,180
确保每次我们添加一个新的关键字

48
00:02:49,180 --> 00:02:52,190
到哈希表中 如果它已经存在 我们要做的

49
00:02:52,190 --> 00:02:55,180
不是使 2 项具有相同关键字 而是要改变

50
00:02:55,180 --> 00:02:58,170
与该关键字相关联的值 所以 我们有一个问题

51
00:02:58,170 --> 00:03:00,990
如果我们有两个条目具有相同关键字 我们

52
00:03:00,990 --> 00:03:03,490
打算以后解决 在我们解决这个问题之前 让我们来定义

53
00:03:03,490 --> 00:03:05,760
查找 并且会证明 查找

54
00:03:05,760 --> 00:03:08,240
实际上将有助于定义一个更好的添加版本

