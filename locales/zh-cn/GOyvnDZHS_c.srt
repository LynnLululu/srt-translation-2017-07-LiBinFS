1
00:00:00,000 --> 00:00:02,000
下面是一种定义 print_numbers (打印数字) 的方法

2
00:00:02,000 --> 00:00:06,000
我们将使用 def (定义) 写一个程序

3
00:00:06,000 --> 00:00:08,000
程序要一个输入

4
00:00:08,000 --> 00:00:10,000
我们用 n 来代表输入

5
00:00:10,000 --> 00:00:12,000
也就是我们将输出的最后一个数字

6
00:00:12,000 --> 00:00:14,000
现在 要写这个循环 我们需要一个新变量

7
00:00:14,000 --> 00:00:17,000
来记录循环迭代

8
00:00:17,000 --> 00:00:21,000
我们用 i 来指代新变量 从1开始 也就是打印出来的第一个数字

9
00:00:21,000 --> 00:00:24,000
现在我们需要 while 循环

10
00:00:24,000 --> 00:00:26,000
我们想要的判断是

11
00:00:26,000 --> 00:00:29,000
能让循环一直继续到 n (包括 n ) 

12
00:00:29,000 --> 00:00:34,000
我们想要打印出从1到 n (包括 n ) 的所有数字

13
00:00:34,000 --> 00:00:38,000
所以我们的测试将是一个小于或等于判断

14
00:00:38,000 --> 00:00:40,000
只要 i 小于或等于 n 我们就希望循环继续

15
00:00:40,000 --> 00:00:43,000
当 i 大于 n 循环就停止

16
00:00:43,000 --> 00:00:46,000
循环主体语句是打印 i 的值

17
00:00:46,000 --> 00:00:48,000
然后让 i 加1

18
00:00:48,000 --> 00:00:51,000
我们不需要返回任何值

19
00:00:51,000 --> 00:00:54,000
程序的唯一目的就是打印出数字

20
00:00:54,000 --> 00:00:58,000
现在让我们做一个测试：我们将打印从1到3的数字

21
00:00:58,000 --> 00:01:01,000
所以输出就是打印出 1, 2, 3

22
00:01:01,000 --> 00:01:03,000
我们可以用很多不同的方式来写这个程序

23
00:01:03,000 --> 00:01:07,000
另外一种方式就是从 i 等于0开始

24
00:01:07,000 --> 00:01:10,000
让判断条件为 i 小于 n 

25
00:01:10,000 --> 00:01:13,000
所以当 i 等于 n 时 循环就会停止

26
00:01:13,000 --> 00:01:17,000
要打印出正确的数字 现在我们要移动一下 print 的位置

27
00:01:17,000 --> 00:01:20,000
把 print 放在让 i 加上1之后

28
00:01:20,000 --> 00:01:24,000
所以打印出来的第一个数字应该是1

29
00:01:24,000 --> 00:01:28,000
打印出来的最后一个数字应该是 n 

30
00:01:28,000 --> 00:01:31,000
当 i 的值等于 n 判断就为假

31
00:01:31,000 --> 00:01:33,000
循环就不再继续

32
00:01:33,000 --> 00:01:36,000
当我们运行这些代码 得到的结果是一样的 即打印出 1, 2, 3

33
00:01:36,000 --> 00:01:40,000
下面我们看看 如果传入0 结果会怎样

34
00:01:40,000 --> 00:01:43,000
程序什么都不会打印出来

35
00:01:43,000 --> 00:01:48,000
因为当 i 等于0 i 小于 n 为假

36
00:01:48,000 --> 00:01:51,000
0不小于0 所以循环不会执行

37
00:01:51,000 --> 00:01:53,000
程序什么都不打印 这似乎挺合理

38
00:01:53,000 --> 00:01:56,000
因为我们想要打印出从1到目标数

39
00:01:56,000 --> 00:01:59,000
如果目标数为0 不打印任何数字是有道理的

