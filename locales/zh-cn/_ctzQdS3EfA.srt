1
00:00:01,170 --> 00:00:04,070
所以我们现在的目标是编写代码

2
00:00:04,070 --> 00:00:06,998
计算我们之前做出的公式 我们要计算

3
00:00:06,998 --> 00:00:10,250
每个页面的排名 我们将要做的

4
00:00:10,250 --> 00:00:15,920
不再是使用这种递归定义 我们将编写一个循环

5
00:00:15,920 --> 00:00:17,950
遍历时间步骤 然后我们要找出

6
00:00:17,950 --> 00:00:20,590
我们想要多少时间步骤 越多的时间步骤

7
00:00:20,590 --> 00:00:23,430
我们就会有越准确的排名 但需要的时间也会越长

8
00:00:23,430 --> 00:00:26,180
所以我们只需要选择时间步骤的

9
00:00:26,180 --> 00:00:28,300
最大值 使我们的循环遍历

10
00:00:28,300 --> 00:00:32,310
这些步骤 计算这些表达式 所以我们写出

11
00:00:32,310 --> 00:00:34,605
代码来做到这些 那么现在我们已经有了 graph

12
00:00:34,605 --> 00:00:37,390
接下来要做的就是弄清楚如何

13
00:00:37,390 --> 00:00:39,830
使用它来计算页面排名 所以为了

14
00:00:39,830 --> 00:00:43,310
做到这一点 我们将创建一个叫做 compute_ranks 的过程 

15
00:00:43,310 --> 00:00:47,410
它需要输入 给出了链接结构的 graph 所以 

16
00:00:47,410 --> 00:00:51,230
作为示例 我们的 graph 具有 URL

17
00:00:51,230 --> 00:00:56,920
每个 URL 后跟它可以跳转到的链接 这就是

18
00:00:56,920 --> 00:01:00,930
由我们的抓取工具生成的 graph

19
00:01:00,930 --> 00:01:03,940
crawLweb 生成的输出为 graph 和 index

20
00:01:03,940 --> 00:01:06,390
我们将使用 graph 作为

21
00:01:06,390 --> 00:01:09,664
compute_ranks 的输入 而 compute_ranks 的输出 

22
00:01:09,664 --> 00:01:12,990
将是一个字典 给出每个 URL 的 Urank

23
00:01:12,990 --> 00:01:17,420
即我们使用公式计算出的排名

24
00:01:17,420 --> 00:01:20,360
而且排名越高越好

25
00:01:20,360 --> 00:01:22,520
一旦我们有了这些排名 我们要做的事情

26
00:01:22,520 --> 00:01:24,250
这部分内容将作为一个习题集作业

27
00:01:24,250 --> 00:01:27,900
布置给你 我们现在不仅仅要 lookup

28
00:01:27,900 --> 00:01:32,012
我们将要有 lookup_best 而 lookup_best 将有

29
00:01:32,012 --> 00:01:35,050
三个输入 它需要我们正在寻找的关键字 

30
00:01:35,050 --> 00:01:38,640
它还需要从抓取中获得的 index

31
00:01:38,640 --> 00:01:42,550
它还需要排名 然后从

32
00:01:42,550 --> 00:01:45,000
这三个输入中 index 将给我们所有

33
00:01:45,000 --> 00:01:48,070
包含该关键词的页面 而 lookup_best 要做

34
00:01:48,070 --> 00:01:50,160
的是 使用排名数据来找到

35
00:01:50,160 --> 00:01:53,700
排名最高的页面 然后将其输出

36
00:01:53,700 --> 00:01:55,810
一旦我们做完这些 你将有一个完整的搜索引擎

37
00:01:55,810 --> 00:02:00,020
你会有一个从种子页面开始的爬虫

38
00:02:00,020 --> 00:02:03,610
查找页面 生成索引 (index) 生成图形 (graph)

39
00:02:03,610 --> 00:02:07,580
graph 是 compute_ranks 的输入 compute_ranks 使用我们的页面

40
00:02:07,580 --> 00:02:09,860
排名算法来找出最受欢迎的页面

41
00:02:09,860 --> 00:02:13,420
然后 lookup_best 将 graph

42
00:02:13,420 --> 00:02:16,570
作为输入 将 index 作为输入 然后是关键词

43
00:02:16,570 --> 00:02:19,330
找到包含该关键字的页面 标识

44
00:02:19,330 --> 00:02:21,840
排名最高的页面作为最佳 那是

45
00:02:21,840 --> 00:02:24,940
你在做完这单元的习题集后将要拥有的 

46
00:02:24,940 --> 00:02:28,140
我们现在要完成 compute_ranks 然后将

47
00:02:28,140 --> 00:02:30,810
定义 lookup_best 作为习题集的一个问题
