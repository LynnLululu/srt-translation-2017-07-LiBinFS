1
00:00:00,220 --> 00:00:02,660
答案是第一个 它只有一个数字3

2
00:00:02,660 --> 00:00:05,290
我们可以根据这条规则得到数字 3

3
00:00:05,290 --> 00:00:09,660
从表达式开始 用数字替换

4
00:00:09,660 --> 00:00:13,880
然后再用数字 3 替换数字

5
00:00:13,880 --> 00:00:16,250
第二个不是合法表达式

6
00:00:16,250 --> 00:00:19,650
原因是从表达式出发 我们只有三种选择

7
00:00:19,650 --> 00:00:23,130
使用表达式 运算符 表达式替换 

8
00:00:23,130 --> 00:00:25,420
或使用数字替换

9
00:00:25,420 --> 00:00:28,630
或使用左圆括号 表达式 右圆括号替换

10
00:00:28,630 --> 00:00:31,020
由于我们要匹配的表达式以左圆括号开始

11
00:00:31,020 --> 00:00:33,320
最终我们只能适用这条规则

12
00:00:33,320 --> 00:00:36,220
替换成带左圆括号的表达式

13
00:00:36,220 --> 00:00:37,920
当我们适用这条规则时 得到的是一个后跟表达式的左圆括号

14
00:00:37,920 --> 00:00:44,170
现在我们有了这个表达式

15
00:00:44,170 --> 00:00:47,220
从这开始 我们匹配了最外层的左圆括号

16
00:00:47,220 --> 00:00:50,070
和右圆括号 并剩下了这些内容

17
00:00:51,330 --> 00:00:54,610
我们可以用带括号表达式替换这个表达式

18
00:00:54,610 --> 00:00:58,770
我们适用这条规则把这个表达式替换成带括号的

19
00:00:58,770 --> 00:01:01,150
这时 之前的第二个右圆括号

20
00:01:01,150 --> 00:01:04,670
仍然存在

21
00:01:04,670 --> 00:01:06,958
这与这里不符 因为需要两个右圆括号才能匹配

22
00:01:06,958 --> 00:01:10,640
这条规则的含义是

23
00:01:10,640 --> 00:01:13,440
我们使用的每一个左圆括号

24
00:01:13,440 --> 00:01:16,690
最终都应使用对应的右圆括号进行闭合

25
00:01:16,690 --> 00:01:19,590
所以无法生成括号使用未成对的表达式

26
00:01:19,590 --> 00:01:23,000
因此这不是一个合法 Python 表达式

27
00:01:23,000 --> 00:01:26,240
我们能够生成第三个表达式 它具有很多嵌套的表达式

28
00:01:26,240 --> 00:01:30,120
这里有三个左圆括号

29
00:01:30,120 --> 00:01:31,790
不过也有三个右圆括号与它们配对闭合

30
00:01:31,790 --> 00:01:33,960
至于如何获得这个表达式

31
00:01:33,960 --> 00:01:36,780
我们从一个表达式开始 作为起点

32
00:01:36,780 --> 00:01:41,530
使用这个规则替换成圆括号 表达式 圆括号

33
00:01:41,530 --> 00:01:43,270
现在 我们有了一个以数字 1 开始的表达式

34
00:01:43,270 --> 00:01:45,900
所以我们把这个表达式替换成表达式 运算符 表达式

35
00:01:45,900 --> 00:01:48,640
我们仍然保留之前的外层括号

36
00:01:48,640 --> 00:01:52,020
现在来处理这里

37
00:01:52,020 --> 00:01:55,170
我们把这个表达式替换成数字 然后替换成数字 1

38
00:01:55,170 --> 00:01:58,920
接下来替换运算符

39
00:01:58,920 --> 00:02:02,220
下面的运算符使用乘法规则

40
00:02:02,220 --> 00:02:06,470
使用 * 替换运算符 接下来要替换这个表达式了

41
00:02:06,470 --> 00:02:08,720
我们尝试生成全部这些 所以我们适用括号规则进行替换

42
00:02:08,720 --> 00:02:12,320
继续

43
00:02:12,320 --> 00:02:13,820
我们用表达式 运算符 表达式

44
00:02:13,820 --> 00:02:16,565
替换这个表达式

45
00:02:16,565 --> 00:02:19,425
最终得到了 2 * 然后再次适用括号规则进行替换

46
00:02:19,425 --> 00:02:22,430
得到 3 * 4 所有的步骤我就不写了

47
00:02:22,430 --> 00:02:25,000
因为屏幕放不下了

48
00:02:25,000 --> 00:02:26,600
但是我希望你们建立一个基本的概念

49
00:02:26,600 --> 00:02:31,510
我们可以通过重复替换 构建像这个一样的复杂表达式

50
00:02:31,510 --> 00:02:35,555
第四个选项不是合法表达式

51
00:02:35,555 --> 00:02:37,960
我们不可能通过这条规则得到一个运算符在最前面的表达式

52
00:02:37,960 --> 00:02:40,850
事实上 Python 中有

53
00:02:40,850 --> 00:02:44,150
可以生成运算符表达式的规则

54
00:02:44,150 --> 00:02:47,690
但是这里有两个表达式 这里是 3 空格 3

55
00:02:47,690 --> 00:02:50,330
如果只是数字 33 那么这实际上是合法的 Python 表达式

56
00:02:50,330 --> 00:02:53,810
但是这并不能通过这里的语法生成

57
00:02:53,810 --> 00:02:57,020
第五个表达式也是合法的

58
00:02:57,020 --> 00:02:59,770
像这样嵌套括号是不实用且不必要的

59
00:02:59,770 --> 00:03:02,810
但是我们始终可以适用这条规则

60
00:03:02,810 --> 00:03:05,520
所以我们可以适用最后这条带括号的规则

61
00:03:05,520 --> 00:03:08,740
获得这个以表达式开始的表达式

62
00:03:08,740 --> 00:03:10,896
然后以括号结束

63
00:03:10,896 --> 00:03:15,540
表达式 括号 反括号 我们可以重复适用这条规则

64
00:03:15,540 --> 00:03:19,010
把中间的表达式替换成表达式

65
00:03:19,010 --> 00:03:22,990
括号 表达式 适用最后一条规则替换这个表达式

66
00:03:22,990 --> 00:03:27,640
这最终使我们的到一个被圆括号环绕的表达式

67
00:03:27,640 --> 00:03:30,910
我们始终保留着外侧的两层括号

68
00:03:30,910 --> 00:03:34,020
所以我们想添加多少层括号都可以 不过这没有必要

69
00:03:34,020 --> 00:03:35,960
也毫无用处 我们永远不会这样写代码

70
00:03:35,960 --> 00:03:38,530
但它仍然是合法的 Python 表达式

71
00:03:38,530 --> 00:03:42,660
这样的递归语法规则十分强大

72
00:03:42,660 --> 00:03:45,850
只需几条简单的规则就能描述一门复杂的语言

73
00:03:45,850 --> 00:03:48,120
我们在本课程中学习的 Python 语言全部都能

74
00:03:48,120 --> 00:03:50,340
用这种方式描述

75
00:03:50,340 --> 00:03:52,230
我们不会像这样描述全部 Python 语言

76
00:03:52,230 --> 00:03:55,630
但是我希望你们已经理解了语法的工作原理

77
00:03:55,630 --> 00:03:57,370
你会发现

78
00:03:57,370 --> 00:03:59,950
尽管随着课程推进 我们会引入一些非正式的构造

79
00:03:59,950 --> 00:04:02,070
但是它们都可以分解成

80
00:04:02,070 --> 00:04:03,780
这些的正式且实际的规则
