1
00:00:00,000 --> 00:00:04,000
为了计算出这个问题的答案

2
00:00:04,000 --> 00:00:08,000
我不用手写计算 我要让 Python 做这项工作

3
00:00:08,000 --> 00:00:12,000
我做的事是从问题中收集数据

4
00:00:12,000 --> 00:00:19,000
数据往返的总时间：75 毫秒

5
00:00:19,000 --> 00:00:26,000
单程距离是 2,500 千米

6
00:00:26,000 --> 00:00:29,000
光在光纤的速度是每秒 200,000 千米

7
00:00:29,000 --> 00:00:34,000
请注意这是 千米/秒 但总时间是以毫秒为单位

8
00:00:34,000 --> 00:00:39,000
也就是说 我需要在毫秒和秒之间做转换

9
00:00:39,000 --> 00:00:41,000
让我们想一下 执行计算时需要什么？

10
00:00:41,000 --> 00:00:48,000
嗯 我想知道 total_time_at_routers

11
00:00:48,000 --> 00:00:54,000
从我想知道的点做回溯 让我们想想执行计算时需要什么

12
00:00:54,000 --> 00:01:05,000
嗯 在路由器上花费的总时间等于 total_time 减去 time_on_the_wires

13
00:01:05,000 --> 00:01:09,000
我要如何计算 time_on_the_wires 呢?

14
00:01:09,000 --> 00:01:14,000
这是它在光纤花的时间 而不是真的在路由器上 (router)

15
00:01:14,000 --> 00:01:20,000
在光纤上的时间 是等于

16
00:01:20,000 --> 00:01:22,000
当我们得到距离和速度 如何计算出时间的方法

17
00:01:22,000 --> 00:01:26,000
嗯 它只是距离除以速度

18
00:01:26,000 --> 00:01:30,000
现在 我们使用的距离是什么？

19
00:01:30,000 --> 00:01:34,000
嗯 总时间 total_time_at_routers 等于 total_time

20
00:01:34,000 --> 00:01:39,000
这是实际的往返时间 所以我们需要知道

21
00:01:39,000 --> 00:01:45,000
在往返行程里 数据在光纤中走了多远的距离 这意味着 我们需将距离乘以两倍

22
00:01:45,000 --> 00:01:49,000
这是单向的距离

23
00:01:49,000 --> 00:01:55,000
我们要除以速度 这是数据在光纤上传输的速度

24
00:01:55,000 --> 00:01:57,000
是光的速度

25
00:01:57,000 --> 00:02:00,000
现在 我们得到了什么？

26
00:02:00,000 --> 00:02:10,000
我们得到 km 除以 km/s 答案是以秒为单位

27
00:02:10,000 --> 00:02:16,000
但我们的时间是以毫秒为单位 这里是秒

28
00:02:16,000 --> 00:02:19,000
我们要将它转换成毫秒

29
00:02:19,000 --> 00:02:26,000
我们要将它乘以每秒的毫秒数

30
00:02:26,000 --> 00:02:33,000
这是我们的换算系数 即每秒的毫秒数

31
00:02:33,000 --> 00:02:38,000
让我们看看结果 — 75

32
00:02:38,000 --> 00:02:42,000
这有点怪 不是吗? 因为总时间是 75

33
00:02:42,000 --> 00:02:44,000
哪里错了?

34
00:02:44,000 --> 00:02:53,000
我在这里印出 time_on_the_wires 为 0

35
00:02:53,000 --> 00:02:55,000
嗯 这不合理 不是吗?

36
00:02:55,000 --> 00:02:59,000
因为它曾在某个地方 现在已经回来了 它不可能花的时间是 0

37
00:02:59,000 --> 00:03:01,000
问题是什么?

38
00:03:01,000 --> 00:03:03,000
嗯 问题是除法

39
00:03:03,000 --> 00:03:10,000
我们在 Python 至少在版本 3 之前  除法是整数除法

40
00:03:10,000 --> 00:03:16,000
所以如果数目小于 1 在这里

41
00:03:16,000 --> 00:03:22,000
因为 one_way_distance 仅为 2500 而我们要除以 200,000

42
00:03:22,000 --> 00:03:27,000
Python 只是将它做四舍五入到最接近的整数 也就是 0

43
00:03:27,000 --> 00:03:32,000
为了处理这个情况 我把它改为浮点数 (float)

44
00:03:32,000 --> 00:03:37,000
这意味着它做正常的除法 给的答案是有小数点的

45
00:03:37,000 --> 00:03:42,000
你可以将这些都转换为浮点数 (floats)  但实际上 我们只需改掉其中一个

46
00:03:42,000 --> 00:03:51,000
如果我现在执行它 我发现的第一个值在这里 25 在光纤上的时间

47
00:03:51,000 --> 00:03:56,000
total_time_at_routers 为 50 毫秒

48
00:03:56,000 --> 00:04:00,000
你需要小心一点 以确定你做了浮点除法 (float division)

49
00:04:00,000 --> 00:04:03,000
浮点 (float) 不是整数除法 而是小数除法

