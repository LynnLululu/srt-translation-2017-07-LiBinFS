1
00:00:00,000 --> 00:00:06,000
这个问题要求我们想想 修改了网络爬虫的新程序

2
00:00:06,000 --> 00:00:10,000
是否改变了它的行为？如果是 它如何影响执行的时间？

3
00:00:10,000 --> 00:00:14,000
首先让我们弄清楚 新代码与旧代码

4
00:00:14,000 --> 00:00:17,000
是否功能相同 或是产生相同的结果

5
00:00:17,000 --> 00:00:23,000
只要看一下 add_to_index 我们可以看到它改变了索引的结构

6
00:00:23,000 --> 00:00:27,000
最后我们得到的索引 看起来像这样

7
00:00:27,000 --> 00:00:31,000
这意味着相同的关键词可能会多次出现

8
00:00:31,000 --> 00:00:36,000
但它每次可能是与不同的 url 一起出现

9
00:00:36,000 --> 00:00:38,000
看看 lookup 过程

10
00:00:38,000 --> 00:00:42,000
它会遍历整个索引 每当它找到的关键词

11
00:00:42,000 --> 00:00:46,000
与它所寻找的关键词符合时 它就会把 url 加到结果列表中

12
00:00:46,000 --> 00:00:50,000
最后 你会取得所有的 url 列表

13
00:00:50,000 --> 00:00:53,000
事实上 它会是相同的列表

14
00:00:53,000 --> 00:00:55,000
如果你使用了原来的 add_to_ndex 和 lookup 过程

15
00:00:55,000 --> 00:01:00,000
但现在我们必须问自己 在 add_to_ndex 和 lookup 过程中

16
00:01:00,000 --> 00:01:04,000
新代码如何影响执行时间与速度

17
00:01:04,000 --> 00:01:08,000
之前 add_to_ndex 为了寻找对应于关键词的项目

18
00:01:08,000 --> 00:01:11,000
可能必须遍历整个索引

19
00:01:11,000 --> 00:01:16,000
但是这个代码中 它要做的就是 将新关键词和 url 加到末尾

20
00:01:16,000 --> 00:01:18,000
这比通过索引来搜索还要快

21
00:01:18,000 --> 00:01:21,000
之前 lookup 只是遍历索引

22
00:01:21,000 --> 00:01:24,000
直到它找到对应查找的关键词

23
00:01:24,000 --> 00:01:28,000
在以前的情况中 lookup 只要找到关键词就会停下来

24
00:01:28,000 --> 00:01:32,000
但现在 lookup 无论如何都必须遍历整个索引

25
00:01:32,000 --> 00:01:34,000
因为它不知道这个关键词将出现多少次

26
00:01:34,000 --> 00:01:39,000
然而之前 它只要找出一个关键词

27
00:01:39,000 --> 00:01:41,000
所以在最后 考虑了所有事情

28
00:01:41,000 --> 00:01:44,000
行为相同 但 add_to_ndex 执行得比较快 而 lookup 执行得比较慢

