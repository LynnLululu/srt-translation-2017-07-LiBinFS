1
00:00:00,000 --> 00:00:04,000
在这问题中 我们希望能够分隔字符串

2
00:00:04,000 --> 00:00:08,000
不只是以空格与空白字符串 而且还有标点符号

3
00:00:08,000 --> 00:00:12,000
这让我们可以对网页做更好的索引

4
00:00:12,000 --> 00:00:16,000
这样我们就不会被尾随文字后的标点符号所愚弄 例如逗号

5
00:00:16,000 --> 00:00:19,000
我们就可以搜索字的本身

6
00:00:19,000 --> 00:00:21,000
而不是字加上逗号

7
00:00:21,000 --> 00:00:24,000
我做的第一件事是初始化输出列表

8
00:00:24,000 --> 00:00:27,000
它将包含被 splitlist 所分隔的字词

9
00:00:27,000 --> 00:00:33,000
我要运用这个变量做记录 目前是否处于分隔点

10
00:00:33,000 --> 00:00:36,000
稍后 这个可能更有意义 所以我们继续下去

11
00:00:36,000 --> 00:00:38,000
使用 for 循环结构

12
00:00:38,000 --> 00:00:42,000
逐一地查看源字符串 一次一个字符

13
00:00:42,000 --> 00:00:46,000
如果目前是作为分隔的字符 如逗号

14
00:00:46,000 --> 00:00:49,000
那么 我们要把 atsplit 设为 True

15
00:00:49,000 --> 00:00:52,000
如果我们位处的字符不存在于 splitlist

16
00:00:52,000 --> 00:00:57,000
而且我们处在分隔点 (atsplit 为 True) 我们要在列表中建立一个新项目

17
00:00:57,000 --> 00:00:59,000
因此 如果我们看上面的范例

18
00:00:59,000 --> 00:01:02,000
如果我们只有一个空格 然后我们有 t

19
00:01:02,000 --> 00:01:06,000
我们想要分隔的是空格 而不是 t

20
00:01:06,000 --> 00:01:11,000
然后我们建立一个新项目 包含 'the' 这个字

21
00:01:11,000 --> 00:01:15,000
而不是把它加到前一个字的末尾

22
00:01:15,000 --> 00:01:18,000
如果我们不在分隔点 但建立了一个字词

23
00:01:18,000 --> 00:01:23,000
像在 'After' 中间 我们只要简单地将目前字符加到字尾

24
00:01:23,000 --> 00:01:27,000
output[-1] 找到输出列表的最后一个项目

25
00:01:27,000 --> 00:01:31,000
我们简单地使用 '+' 运算来添加字符

26
00:01:31,000 --> 00:01:34,000
一旦我们的源字符串中的每个字符都遍历后 我们传回输出列表

