1
00:00:00,307 --> 00:00:03,387
我说过我们不需要新的结构了 但是我还是会再介绍一个

2
00:00:03,387 --> 00:00:07,173
那会让我们为建立搜索引擎编写代码方便得多

3
00:00:07,173 --> 00:00:10,788
它在很多过程中都会很有用

4
00:00:10,788 --> 00:00:13,637
这一新结构叫做 loop (循环) 

5
00:00:13,637 --> 00:00:15,722
这是一种不断重复做事情的方式

6
00:00:15,722 --> 00:00:19,105
我们要介绍的第一种循环叫做 while 循环

7
00:00:19,105 --> 00:00:20,588
其结构如下

8
00:00:20,588 --> 00:00:23,822
先是关键词 while 然后是一个判断表达式

9
00:00:23,822 --> 00:00:28,506
再是一个冒号 里面是一个 block (程序块) 

10
00:00:28,506 --> 00:00:31,656
该程序块是一系列的指令

11
00:00:31,656 --> 00:00:34,272
这和 if 语句非常相似

12
00:00:34,273 --> 00:00:36,771
下面我们来回顾一下 if 语句

13
00:00:36,771 --> 00:00:40,940
先是一个 if 然后是一个判断表达式 再是一个冒号

14
00:00:40,940 --> 00:00:45,107
接着是一个缩进的程序块 也就是一系列的语句

15
00:00:45,107 --> 00:00:49,623
当判断表达式的值为 True 该程序块执行

16
00:00:49,623 --> 00:00:55,190
在 if 语句中 根据判断表达式是否为真 该程序块执行0或1次

17
00:00:55,190 --> 00:01:00,473
在 while 循环中 该程序块可以执行任意次数

18
00:01:00,473 --> 00:01:03,640
只要判断表达式为真 程序就不断运行

19
00:01:03,640 --> 00:01:06,272
在 if 语句中 如果判断表达式为真

20
00:01:06,272 --> 00:01:09,723
我们就执行该程序块 然后继续

21
00:01:09,723 --> 00:01:14,523
如果判断表达式为假 我们就直接跳到下一表达式

22
00:01:14,523 --> 00:01:19,910
在 while 循环中 我们也是先检查判断表达式

23
00:01:19,910 --> 00:01:21,600
如果为真 我们就运行该程序块

24
00:01:21,700 --> 00:01:25,973
但是之后我们会回到前面 而不是跳到下一个语句

25
00:01:25,973 --> 00:01:29,889
我们再次检查判断表达式 如果为真 我们运行程序块

26
00:01:29,889 --> 00:01:32,856
我们总是回到判断表达式

27
00:01:32,856 --> 00:01:36,923
如果为真 我们就再次运行程序块 然后回到判断表达式

28
00:01:36,924 --> 00:01:41,456
如果还为真 就再次运行程序块 然后再回到判断表达式

29
00:01:41,456 --> 00:01:47,675
只要判断表达式为真 重复多少次都行

30
00:01:47,675 --> 00:01:52,210
我们会不断地运行该程序块 不断地再次检查判断表达式

31
00:01:52,220 --> 00:01:54,973
到某个时候 判断表达式可能为假

32
00:01:54,973 --> 00:01:59,560
一旦判断表达式为假 我们就执行下一个指令

33
00:01:59,560 --> 00:02:02,122
也就是说 while 循环可能执行程序块0次

34
00:02:02,123 --> 00:02:05,424
如果判断表达式在一开始就为假

35
00:02:05,424 --> 00:02:08,639
可能执行1次 如果判断表达式第一次为真 但第二次为假

36
00:02:08,639 --> 00:02:12,730
可能执行2次 3次 或任意次数 它可以永远运行下去

37
00:02:12,730 --> 00:02:16,706
没有什么条件能保证判断表达式最终会为假

38
00:02:16,706 --> 00:02:19,256
下面是 while 循环的一个例子

39
00:02:19,257 --> 00:02:23,560
我们先引入变量 i 赋值为0

40
00:02:23,560 --> 00:02:27,939
然后使用 while 循环 判断表达式为 i小于10

41
00:02:27,939 --> 00:02:32,406
只要该表达式为真 我们就执行程序块

42
00:02:32,406 --> 00:02:35,806
程序块为 print i 然后让 i 加1

43
00:02:35,806 --> 00:02:38,400
这就是程序块内的指令

44
00:02:38,400 --> 00:02:42,391
一开始 i 的值为0 i 小于10

45
00:02:42,391 --> 00:02:45,900
我们将进入循环

46
00:02:45,900 --> 00:02:50,655
判断表达式为真 我们将执行程序块 打印 i

47
00:02:50,655 --> 00:02:54,540
我们看到0这个值被打印出来

48
00:02:54,540 --> 00:02:59,204
下面我们进行赋值 这将改变i的值

49
00:02:59,205 --> 00:03:05,205
让 i 加上1 所以现在 i 的值是1

50
00:03:05,205 --> 00:03:08,956
如果这是一个 if 到这里就结束了 但这是 while 所以我们继续

51
00:03:08,956 --> 00:03:13,790
我们回去 再次判断 i 是否小于10

52
00:03:13,790 --> 00:03:17,257
现在 i 的值为1 还是小于10

53
00:03:17,257 --> 00:03:19,873
所以我们继续 再次执行程序块

54
00:03:19,873 --> 00:03:22,474
我们将打印 i 这次我们将看到1这个值

55
00:03:22,474 --> 00:03:27,190
下一个语句是让 i 的值增加1

56
00:03:27,190 --> 00:03:29,757
这将让 i 的值变为2

57
00:03:29,757 --> 00:03:33,841
所以现在 i 的值是2

58
00:03:33,841 --> 00:03:38,807
因为这是一个 while 我们继续 回到判断表达式

59
00:03:38,807 --> 00:03:44,340
i 仍然小于10 我们将打印2

60
00:03:44,341 --> 00:03:49,356
再让 i 加1 让其值变为3

61
00:03:50,756 --> 00:03:51,773
然后继续

62
00:04:19,230 --> 00:04:24,456
再次判断 i 仍然小于10 所以我们将再次打印 i

63
00:04:24,456 --> 00:04:33,400
我们将打印9这个值 然后加1 9+1=10

64
00:04:33,400 --> 00:04:35,540
也就是 i 现在的值

65
00:04:39,490 --> 00:04:40,972
再回到上面

66
00:04:41,720 --> 00:04:48,723
现在 i 的值为10

67
00:04:48,723 --> 00:04:54,674
10不小于10 所以判断表达式为假 该 while 循环就结束了

68
00:04:54,674 --> 00:04:57,940
我们将继续执行这里的语句 在这个例子中 这里没有别的语句

69
00:04:57,990 --> 00:05:02,190
我们一共执行了该循环10次

70
00:05:02,190 --> 00:05:04,323
打印出了从0到9的所有整数

71
00:05:04,323 --> 00:05:10,340
i 的新值为10 如果接下去我们要使用 i 的值

72
00:05:10,340 --> 00:05:12,239
这个值将是10

73
00:05:12,240 --> 00:05:16,156
下面我们进行一个小练习 看看你们是否明白了 while 循环

74
00:05:16,156 --> 00:05:18,924
问题是 运行该程序会得到什么结果

75
00:05:18,924 --> 00:05:20,623
下面是这个程序的编码

76
00:05:20,623 --> 00:05:24,306
首先将 i 赋值为0

77
00:05:24,306 --> 00:05:32,222
然后是一个 while 循环

78
00:05:32,223 --> 00:05:34,207
判断表达式为 i 不等于10

79
00:05:34,207 --> 00:05:40,223
然后是 i=i+1

80
00:05:40,223 --> 00:05:43,560
然后是 print i

81
00:05:43,560 --> 00:05:46,990
这和前面的例子很相似 但是在某些方面又有所不同

82
00:05:46,990 --> 00:05:50,440
接下来就要看你们是否能思考出该程序的结果了

83
00:05:50,440 --> 00:05:51,656
尽量自己思考得出答案

84
00:05:51,656 --> 00:05:54,623
当然你们也可以在 Python 解释器里试着运行

85
00:05:54,623 --> 00:05:56,240
选项为

86
00:05:56,240 --> 00:05:57,424
产生一个错误

87
00:05:57,424 --> 00:06:00,356
打印出从0到9的所有整数

88
00:06:00,356 --> 00:06:03,390
打印出从1到9的所有整数

89
00:06:03,390 --> 00:06:06,550
打印出从1到10的所有整数

90
00:06:06,550 --> 00:06:12,189
最后一项是 程序永远运行下去 或至少运行到机器没电为止

91
00:06:12,589 --> 00:06:15,257
看你们能否自己想出答案

92
00:06:15,257 --> 00:06:16,340
当然你们也可以试着运行这个程序

93
00:06:16,340 --> 00:06:19,340
但是最好先自己想出答案 再在 Python 解释器中运行

