1
00:00:00,570 --> 00:00:03,100
那么 现在你对 Python 有了足够的了解

2
00:00:03,100 --> 00:00:05,350
能够解决我们在这单元一开始提出的问题

3
00:00:05,350 --> 00:00:09,370
关于提取网页中的链接的问题

4
00:00:09,370 --> 00:00:13,550
在我们编写代码之前

5
00:00:13,550 --> 00:00:15,770
我想更详细地介绍一下

6
00:00:15,770 --> 00:00:18,910
网页到底是怎么回事 我们探讨了关于

7
00:00:18,910 --> 00:00:21,750
Python 中的字符串和网页真正是什么

8
00:00:21,750 --> 00:00:25,700
它就是一个长字符串 当你在浏览器中看到一个网页

9
00:00:25,700 --> 00:00:28,640
它看起来并不像一个字符串 这里是一个示例网站

10
00:00:28,640 --> 00:00:33,420
我最喜欢的漫画 XKCD 中的一页 希望你可以

11
00:00:33,420 --> 00:00:36,960
开始对 Python 足够的学习 了解 Python 的力量

12
00:00:36,960 --> 00:00:39,420
Python 可以让你飞翔 也许对于漫画

13
00:00:39,420 --> 00:00:42,090
其余的部分 如果你还没有用过 Python 以外的语言

14
00:00:42,090 --> 00:00:45,130
现在还有点难以理解

15
00:00:45,130 --> 00:00:47,830
它是在打趣其他的语言 需要做可怕的大量工作

16
00:00:47,830 --> 00:00:50,760
去完成简单的东西 就像我们这里看到的

17
00:00:50,760 --> 00:00:53,780
只是能打印出一个字符串 但是

18
00:00:53,780 --> 00:00:57,460
使用 Python 我们就可以快得像飞一样 而且你很快就可以

19
00:00:57,460 --> 00:01:00,300
通过这门课程学会快速飞翔 这并不像仅仅是个

20
00:01:00,300 --> 00:01:03,540
字符串 我们之前看到 一个字符串只是一串

21
00:01:03,540 --> 00:01:06,218
字符的序列 当我们看到这样的网页

22
00:01:06,218 --> 00:01:09,650
而且 我们看到图像 我们看到按钮 我们看到一些文字

23
00:01:09,650 --> 00:01:11,310
我们看到这些东西 是链接 你可以看到

24
00:01:11,310 --> 00:01:16,030
下划线 这些都是链接 而浏览器呈现网页

25
00:01:16,030 --> 00:01:19,610
的方式看起来很吸引人 实际上

26
00:01:19,610 --> 00:01:22,408
那只是一个文本流

27
00:01:22,408 --> 00:01:25,440
如果你在网页上点击一下鼠标右键

28
00:01:25,440 --> 00:01:28,340
其中一个菜单就是 查看网页源代码 当你点击

29
00:01:28,340 --> 00:01:33,380
这个选项 你会看到实际的源代码 也就是进入浏览器的内容

30
00:01:33,380 --> 00:01:38,380
你的浏览器发送一个请求 网址就是在地址栏中显示的这个

31
00:01:38,380 --> 00:01:43,390
那么 它发送一个请求到 xkcd.com/355

32
00:01:43,390 --> 00:01:47,040
它发送了这个请求 这就是返回的内容 返回的就是一个

33
00:01:47,040 --> 00:01:52,570
文本流 我们可以看看这些文本 有一些是相当令人费解的

34
00:01:54,330 --> 00:01:57,370
所以 重要的是链接 这里有一个

35
00:01:57,370 --> 00:02:00,140
链接的例子 这个链接以

36
00:02:00,140 --> 00:02:04,910
这样的标签开头 HTML 语言使用这些

37
00:02:04,910 --> 00:02:08,793
尖括号 然后 <a href =

38
00:02:08,793 --> 00:02:12,490
是我们链接的开头 它后面接着的

39
00:02:12,490 --> 00:02:15,770
一个这样由双引号包围的字符串 同样

40
00:02:15,770 --> 00:02:17,890
在 Python 中也是一个字符串 所以 我们有一对

41
00:02:17,890 --> 00:02:22,350
双引号 双引号之间是一个 URL (网址)

42
00:02:22,350 --> 00:02:24,870
URL (网址) 是对网页内容定位的方式

43
00:02:24,870 --> 00:02:28,090
在这里我们有 URL 的 http:

44
00:02:28,090 --> 00:02:30,690
这意味着它是一个 Web 请求 我们后面将讨论更多

45
00:02:30,690 --> 00:02:33,920
关于 HTTP 的含义和

46
00:02:33,920 --> 00:02:37,490
用于请求网页的协议 现在重要的是 这是一个

47
00:02:37,490 --> 00:02:41,870
地址 如果我们在网页浏览器中打开它 这将给

48
00:02:41,870 --> 00:02:45,860
我们打开另一个页面 我在这里看到的

49
00:02:45,860 --> 00:02:51,410
是 News/Blag 的文本下的链接 如果我们点击该链接

50
00:02:53,510 --> 00:02:57,730
将来到这个网址 blag.skcd.com

51
00:02:57,730 --> 00:03:00,550
那就是我们看到的链接对应的页面

52
00:03:00,550 --> 00:03:04,580
这里写的 vlad.skcd.com 当我们点击这个

53
00:03:04,580 --> 00:03:08,290
链接 我们就去到了这里 因此 构建抓取工具

54
00:03:08,290 --> 00:03:10,590
我们希望对每一个网页做的 就是

55
00:03:10,590 --> 00:03:13,450
找到页面中的这些链接 我们要保持

56
00:03:13,450 --> 00:03:15,790
跟随这些链接 我们要跟着他们

57
00:03:15,790 --> 00:03:18,720
在网络上找到更多的内容 这类似于

58
00:03:18,720 --> 00:03:20,894
人们浏览时会做的一样 如果他们

59
00:03:20,894 --> 00:03:23,670
点击页面上的每一个链接 跟随所有

60
00:03:23,670 --> 00:03:26,890
他们找到的链接 查看所有的内容 这是一个非常

61
00:03:26,890 --> 00:03:29,120
浪费时间的方法 如果你自己

62
00:03:29,120 --> 00:03:31,740
这样做的话 我们要建立一个网络爬虫

63
00:03:31,740 --> 00:03:36,370
可以自动执行 因此 我们的目标是

64
00:03:36,370 --> 00:03:40,960
从网络请求返回的文本中 找到一个链接

65
00:03:40,960 --> 00:03:44,090
链接以 <a href= 标记开头的

66
00:03:44,090 --> 00:03:47,910
然后从标记后面提取

67
00:03:47,910 --> 00:03:51,640
可以链接到网页的 URL (网址)

68
00:03:51,640 --> 00:03:53,170
这些 URL 就是我们将要

69
00:03:53,170 --> 00:03:57,270
在抓取工具中使用的 通过使用我们

70
00:03:57,270 --> 00:04:01,260
学到的关于字符串的知识 以及你对变量的了解

71
00:04:01,260 --> 00:04:03,840
你已经知道了足够多的内容可以完成

72
00:04:03,840 --> 00:04:06,740
我们要做的就是找到开头的标志

73
00:04:06,740 --> 00:04:09,780
开头的标志就是这样的文本

74
00:04:09,780 --> 00:04:14,930
我们寻找与 <a href= 这部分完全匹配的内容

75
00:04:14,930 --> 00:04:20,630
这就是标志 它们都是以

76
00:04:20,630 --> 00:04:25,890
<a href= 开头的 并非所有的网页具有相同的结构 还有很多

77
00:04:25,890 --> 00:04:27,680
其他的方法来进行标记

78
00:04:27,680 --> 00:04:29,910
例如 A 可以是大写字母 有可能

79
00:04:29,910 --> 00:04:32,640
a 与 href 之间有更多的空格

80
00:04:32,640 --> 00:04:35,100
双引号实际上并不需要在那儿

81
00:04:35,100 --> 00:04:37,280
对于我们现在要做的 我们假设

82
00:04:37,280 --> 00:04:40,180
我们的所有网页遵循这里看到的相同结构

83
00:04:40,180 --> 00:04:43,790
每个链接都以 <a href= 开头

84
00:04:43,790 --> 00:04:47,650
没有任何可笑的空格或其他任何东西 有一个等号

85
00:04:47,650 --> 00:04:50,280
有一个双引号 然后紧跟着 URL (网址)

86
00:04:50,280 --> 00:04:53,100
然后又是一个双引号 也就是说我们正在寻找

87
00:04:53,100 --> 00:04:56,475
类似这样的字符串 我们期待找到

88
00:04:56,475 --> 00:05:00,100
<a href= 后面跟着一个双引号

89
00:05:00,100 --> 00:05:03,375
双引号后面就是这个网址 这是我们真正关心的

90
00:05:03,375 --> 00:05:06,290
我们要找出网页上的 URL

91
00:05:06,290 --> 00:05:10,330
这是一个结束双引号 然后 还有

92
00:05:10,330 --> 00:05:12,980
更多的关闭标记 还有很多其他的

93
00:05:12,980 --> 00:05:15,720
东西在这两侧 但这里才是

94
00:05:15,720 --> 00:05:17,420
我们想要处理的 我们希望找到链接的标记

95
00:05:17,420 --> 00:05:21,410
然后在作为链接的标记中 我们

96
00:05:21,410 --> 00:05:25,110
要找到这些网址 因此 我们假设

97
00:05:25,110 --> 00:05:29,610
页面内容为一个变量

98
00:05:29,610 --> 00:05:33,550
这个变量叫 page 我们今天不用担心

99
00:05:33,550 --> 00:05:36,250
如何得到这些页面内容 我们会

100
00:05:36,250 --> 00:05:39,440
提供一个函数来做到这一点 对于

101
00:05:39,440 --> 00:05:41,520
今天的代码 让我们假设

102
00:05:41,520 --> 00:05:44,780
页面已初始化 它包含一些

103
00:05:44,780 --> 00:05:50,350
储存为字符串的网页内容 我们的目标是要找到

104
00:05:50,350 --> 00:05:53,620
页面中的第一个链接的 URL  这将涉及几个步骤

105
00:05:53,620 --> 00:05:57,940
所以我们要做的是找到链接的开头

106
00:05:57,940 --> 00:06:00,500
我们想找到有

107
00:06:00,500 --> 00:06:03,940
a href= 的地方 我们不能光看第一个

108
00:06:03,940 --> 00:06:06,030
我们找到的字符串 因为页面中还有很多

109
00:06:06,030 --> 00:06:09,810
其他不是 URL 的字符串 我想你已经知道

110
00:06:09,810 --> 00:06:12,540
怎样做了 所以我们将它作为一次测验

111
00:06:12,540 --> 00:06:15,610
你这个测验的目标是写一些 Python 代码

112
00:06:15,610 --> 00:06:17,980
初始化变量 start_link 的值为

113
00:06:17,980 --> 00:06:21,110
第一个 <a href= 出现的位置

114
00:06:21,110 --> 00:06:23,520
也就是页面上出现的第一个

115
00:06:23,520 --> 00:06:26,020
链接开头的标记 所以你应该假设

116
00:06:26,020 --> 00:06:27,680
page 的初始值是一些网页的内容

117
00:06:27,680 --> 00:06:29,700
也就是我们需要从中查找

118
00:06:29,700 --> 00:06:32,460
第一个 <a href= 出现的地方

119
00:06:32,460 --> 00:06:35,150
这就是页面上的第一个链接

